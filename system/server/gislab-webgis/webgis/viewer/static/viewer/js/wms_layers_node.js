Ext.namespace('WebGIS');

WebGIS.WmsLayersNode = Ext.extend(Ext.tree.TreeNode, {
	constructor: function(config) {
		config.checked = true;
		config.expanded = true;
		WebGIS.WmsLayersNode.superclass.constructor.apply(this, arguments);
		this.addEvents('layerchange');
		this.layer = config.layer;
		this.layersTree = config.layersTree;
		this.root = this;
		// Stack for passing parameters during checkchange events
		// Used values:
		//  0 - checkchange event generated by user (or programmatically that cause update of layers parameter)
		//  1 - checkchange event generated programmatically on child nodes
		//  2 - checkchange event generated programmatically on parent node - to uncheck it
		//  3 - checkchange event generated programmatically on parent node - to check it but do not change checked state of its child nodes
		this.checkchangeParamsStack = [0];
		this.buildLayersTree();
		this.updateLayersParam();
		this.on('checkchange', this.onNodeCheckChanged);
	},
	updateLayersParam: function() {
		if (this.layer.CLASS_NAME == 'OpenLayers.Layer.WMS') {
			var visible_layers = this.getVisibleLayers();
			this.layer.mergeNewParams({LAYERS: [].concat(visible_layers).reverse()});
			this.fireEvent('layerchange', this, this.layer, visible_layers);
		}
		//console.log(this.root.checkchangeParamsStack);
	},
	onNodeCheckChanged: function(node, checked) {
		var param = this.root.checkchangeParamsStack.pop();

		// check parent whether this is its first checked child
		if (checked && !node.parentNode.attributes.checked && node.getDepth() > node.root.getDepth()) {
			this.root.checkchangeParamsStack.push(3);
			node.parentNode.getUI().toggleCheck(true);
		}
		if (param == 3) {
			return;
		}

		// uncheck parent whether its every child is unchecked
		if (!checked && node.getDepth() > node.root.getDepth()) {
			var allSiblingsUnchecked = true;
			Ext.each(node.parentNode.childNodes, function(n) {
				if (n.attributes.checked) {
					allSiblingsUnchecked = false;
					return false;
				}
			});
			if (allSiblingsUnchecked) {
				this.root.checkchangeParamsStack.push(2);
				node.parentNode.getUI().toggleCheck(false);
			}
		}

		// check/uncheck every child if this is group
		if (node.hasChildNodes()) {
			Ext.each(node.childNodes, function(childNode) {
				if (childNode.attributes.checked != checked) {
					this.root.checkchangeParamsStack.push(1);
					childNode.getUI().toggleCheck(checked);
				}
			}, this);
		}

		if (param == 0) {
			this.root.checkchangeParamsStack = [0];
			this.root.updateLayersParam();
		}
	},
	createLayerNode: function(layer_config) {
		var isGroup = layer_config.hasOwnProperty('layers');
		var node = new Ext.tree.TreeNode({
			text: layer_config.name,
			checked: true,
			leaf: !isGroup,
			expanded: true,
			listeners: {
				checkchange: this.onNodeCheckChanged,
			}
		});
		node.root = this;
		if (isGroup) {
			var groupChecked = false;
			Ext.each(layer_config.layers, function(child_layer_config) {
				var childNode = this.createLayerNode(child_layer_config);
				node.appendChild(childNode);
				groupChecked = groupChecked || childNode.attributes.checked;
			}, this);
			node.attributes.checked = groupChecked;
		} else if (layer_config.visible == false) {
			node.attributes.checked = false;
		}
		return node;
	},
	buildLayersTree: function() {
		var groupChecked = false;
		Ext.each(this.layersTree, function(layer_config) {
			var node = this.createLayerNode(layer_config);
			groupChecked = groupChecked || node.attributes.checked;
			this.appendChild(node);
		}, this);
		this.attributes.checked = groupChecked;
	},

	getVisibleLayers: function() {
		var layers_names = [];
		this.cascade(function(node) {
			if (node.isLeaf() && node.attributes.checked) {
				layers_names.push(node.attributes.text)
			}
		}, this);
		return layers_names;
	},
	getAllLayers: function() {
		var layers_names = [];
		this.cascade(function(node) {
			layers_names.push(node.attributes.text)
		}, this);
		return layers_names;
	}
});
