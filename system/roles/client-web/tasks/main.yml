---
#
### GIS.lab WEB CLIENT ###
#
# Install and configure GIS.lab Web client.
#
# Logging:
#   production: syslog, /storage/log/nginx-error.log
#   debug:      /storage/log/nginx-access.log, /storage/log/nginx-error.log
#               syslog


- name: Install packages
  apt:
    pkg: "{{ item }}"
    force: yes
    install_recommends: no
    state: latest
  with_items:
    - gcc
    - make
    - nginx
    - python-dateutil
    - python-dev
    - python-pip
    - python-psycopg2
    - python-virtualenv
    - pwgen
    - zip


- name: Create GIS.lab Web client root directory
  file:
    dest: "{{ root_dir }}"
    state: directory


### POSTGRESQL
- name: Generate 'gislab_web' database user password (run only once)
  shell: >
    pwgen -s -N 1 10 > {{ GISLAB_PATH_SECRET }}/gislab-web_db_user_password.txt
    &&
    chmod 600 {{ GISLAB_PATH_SECRET }}/gislab-web_db_user_password.txt
  args:
    creates: "{{ GISLAB_PATH_SECRET }}/gislab-web_db_user_password.txt"

- name: Get 'gislab_web' database user password
  shell: cat {{ GISLAB_PATH_SECRET }}/gislab-web_db_user_password.txt
  register: gislab_web_db_user_password


- name: Create database user 'gislab_web'
  postgresql_user:
    name: gislab_web
    role_attr_flags: NOCREATEDB,NOCREATEROLE,NOSUPERUSER
    password: "{{ gislab_web_db_user_password.stdout }}"
    state: present
  sudo_user: postgres

- name: Grant privileges for user 'gislab_web'
  postgresql_privs:
    db: gislab
    privs: ALL
    type: schema
    objs: public
    role: gislab_web
  sudo_user: postgres


### GIS.lab Web INSTALLATION
# TODO: try something more efficient (like rsync or copy only one file)
- name: Copy GIS.lab Web installation to temporary directory on server
  copy:
    src: static/gislab-web
    dest: "{{ GISLAB_PATH_TMP }}/"

- name: Install GIS.lab Web with dependencies
  pip:
    name: "{{ GISLAB_PATH_TMP }}/gislab-web"
    virtualenv: "{{ root_dir }}/virtualenv/gislab-web"
    virtualenv_site_packages: yes
    extra_args: "--download-cache={{ GISLAB_PATH_CACHE }}/packages/pip"
    state: present
  notify:
    - service gislab-web restart


### GIS.lab Web PROJECT
- name: Generate secret key (run only once)
  shell: >
    python {{ GISLAB_PATH_TMP }}/gislab-web/utils/secret_key.py
    > {{ GISLAB_PATH_SECRET }}/gislab-web_secret_key.txt
    &&
    chmod 600 {{ GISLAB_PATH_SECRET }}/gislab-web_secret_key.txt
  args:
    creates: "{{ GISLAB_PATH_SECRET }}/gislab-web_secret_key.txt"

- name: Get secret key
  shell: cat {{ GISLAB_PATH_SECRET }}/gislab-web_secret_key.txt
  register: gislab_web_secret_key


- name: Create GIS.lab Web project deployment directory
  file:
    path: "{{ root_dir }}/www"
    state: directory

- name: Deploy GIS.lab Web project
# we do not use Ansible django_manage module because of missing 'template' option
  shell: >
    source {{ root_dir }}/virtualenv/gislab-web/bin/activate
    &&
    django-admin.py startproject
    --template={{ GISLAB_PATH_TMP }}/gislab-web/webgis/conf/project_template/
    djproject {{ root_dir }}/www
  args:
    executable: /bin/bash
    creates: "{{ root_dir }}/www/djproject/settings.py"
  notify:
    - service gislab-web restart

- name: Install secrets
  template:
    src: gislab-web/settings_secret.py.j2
    dest: "{{ root_dir }}/www/djproject/settings_secret.py"
  notify:
    - service gislab-web restart

- name: Sync database
  django_manage:
    command: syncdb
    app_path: "{{ root_dir }}/www"
    settings: djproject.settings
    virtualenv: "{{ root_dir }}/virtualenv/gislab-web"
  notify:
    - service gislab-web restart

- name: Collect static files
  django_manage:
    command: collectstatic
    app_path: "{{ root_dir }}/www"
    settings: djproject.settings
    virtualenv: "{{ root_dir }}/virtualenv/gislab-web"
  notify:
    - service gislab-web restart

- name: Create media directory
  file:
    path: "{{ GISLAB_PATH_APPLICATIONS }}/gislab-web/media"
    state: directory
    owner: www-data
    group: www-data


### GIS.lab Web SERVERS
- name: Generate self signed SSL certificate (run only once)
  shell: >
    openssl req -x509 -nodes -days 3650 -newkey rsa:2048
    -keyout {{ GISLAB_PATH_SECRET }}/gislab-web.key
    -out {{ GISLAB_PATH_SECRET }}/gislab-web.crt
    -subj "/C=GL/ST=GIS.lab/L=GIS.lab/O=GIS.lab/OU=GIS.lab/CN=GIS.lab"
    &&
    chmod 600 {{ GISLAB_PATH_SECRET }}/gislab-web.key
    &&
    chmod 600 {{ GISLAB_PATH_SECRET }}/gislab-web.crt
  args:
    executable: /bin/bash
    creates: "{{ GISLAB_PATH_SECRET }}/gislab-web.crt"

- name: Install SSL certificate
  shell: "{{ item }}"
  with_items:
    - mkdir -p /etc/nginx/ssl
    - cp {{ GISLAB_PATH_SECRET }}/gislab-web.key /etc/nginx/ssl/gislab-web.key
    - cp {{ GISLAB_PATH_SECRET }}/gislab-web.crt /etc/nginx/ssl/gislab-web.crt


- name: Install Gunicorn startup script
  template:
    src: gunicorn/gunicorn.sh.j2
    dest: "{{ root_dir }}/www/gunicorn.sh"
    mode: 0755
  notify:
    - service gislab-web restart


- name: Configure Nginx virtualhost
  template:
    src: nginx/site-gislab-web.j2
    dest: /etc/nginx/sites-available/gislab-web
  notify:
    - service nginx restart

- name: Activate Nginx virtualhost web.gis.lab
  file:
    src: /etc/nginx/sites-available/gislab-web
    dest: /etc/nginx/sites-enabled/gislab-web
    state: link
  notify:
    - service nginx restart


- name: Configure GIS.lab Web service
  template:
    src: init/gislab-web.conf.j2
    dest: /etc/init/gislab-web.conf
  notify:
    - service gislab-web restart

- name: Register GIS.lab Web service
  file:
    src: /lib/init/upstart-job
    dest: /etc/init.d/gislab-web
    state: link
  notify:
    - service gislab-web restart


- name: Activate cache cleaning
  template:
    src: cron/gislab-clean-web.j2
    dest: /etc/cron.d/gislab-clean-web


# QGIS PLUGIN INSTALLATION
- name: Copy GIS.lab Web plugin installation to temporary directory on server
  copy:
    src: static/gislab-web-plugin
    dest: "{{ GISLAB_PATH_TMP }}/"

- name: Copy GIS.lab Web plugin metadata file to temporary dir on server
  template:
    src: gislab-web-plugin/metadata.txt.j2
    dest: "{{ GISLAB_PATH_TMP }}/gislab-web-plugin/gislab_web/metadata.txt"


- name: Build GIS.lab Web plugin package
  shell: >
    cd {{ GISLAB_PATH_TMP }}/gislab-web-plugin/gislab_web
    &&
    make zip

- name: Create Web plugin directory
  file:
    dest: "{{ root_dir }}/qgis-plugin"
    state: directory

- name: Install GIS.lab Web plugin package
  shell: "{{ item }}"
  with_items:
    - mv {{ GISLAB_PATH_TMP }}/gislab-web-plugin/gislab_web/gislab_web.zip
         {{ root_dir }}/qgis-plugin/
    - cp {{ GISLAB_PATH_TMP }}/gislab-web-plugin/gislab_web/icon.png
         {{ root_dir }}/qgis-plugin/

- name: Install GIS.lab Web plugin repository file
  template:
    src: gislab-web-plugin/plugins.xml.j2
    dest: "{{ root_dir }}/qgis-plugin/plugins.xml"


- name: Configure Nginx virtualhost qgis.gis.lab
  template:
    src: nginx/site-gislab-web-plugin.j2
    dest: /etc/nginx/sites-available/gislab-web-plugin
  notify:
    - service nginx restart

- name: Activate Nginx virtualhost qgis.gis.lab
  file:
    src: /etc/nginx/sites-available/gislab-web-plugin
    dest: /etc/nginx/sites-enabled/gislab-web-plugin
    state: link
  notify:
    - service nginx restart


# Logging
- name: Activate GIS.lab Web error logs checking
  lineinfile:
    dest: /etc/logcheck/logcheck.logfiles
    line: "{{ GISLAB_PATH_LOG }}/nginx-error.log"
    state: present


- meta: flush_handlers

# vim: set ts=8 sts=2 sw=2 et:
