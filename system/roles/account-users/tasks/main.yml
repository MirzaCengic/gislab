---
#
### USER ACCOUNTS ###
#
# Set strong password for provisioning user account, remove other not required user accounts,
# configure shell, create storage and install account configuration.


- name: Install packages
  apt: pkg={{ item }} force=yes install_recommends=no state=latest
  with_items:
    - pwgen


- name: Remove user accounts which doesn't belong to GIS.lab users
  # reason of deleting these users is a fact, that some OS images are containing multiple user accounts for
  # provisioning (for example both vagrant and ubuntu) and leaving them can cause security problem
  # this task is performed only for accounts with ID in range 1000-1010. GIS.lab user accounts IDs begin with 3000
  shell: for userid in {1000..1010}; do username=$(getent passwd $userid | awk -F ':' '{print $1}');
         if [ "$username" != "" -a "$username" != "{{ GISLAB_PROVISIONING_USER }}" ]; then
           deluser --remove-home $username;
         fi;
         done
  args:
    executable: /bin/bash


# provisioning user
- name: Set strong password for provisioning user account
  shell: 'echo "{{ GISLAB_PROVISIONING_USER }}:$(pwgen -1 -n 24)" | chpasswd'

- name: Set strong permissions to provisioning user account home directory
  file: path={{ item }} mode=0700
  with_items:
    - /home/{{ GISLAB_PROVISIONING_USER }}
    - /home/{{ GISLAB_PROVISIONING_USER }}/.ssh


# shell
- name: Configure shell prompt for provisioning user
  lineinfile: dest=/home/{{ GISLAB_PROVISIONING_USER }}/.bashrc \
    regexp="^PS1=.*h\.GIS.lab(.*).*$" \
    line='PS1="\[$(tput bold)\]\u@\h.GIS.lab({{ GISLAB_UNIQUE_ID }}):\w\\$\[$(tput sgr0)\] "' \
    state=present

- name: Configure shell prompt for new user accounts
  lineinfile: dest=/etc/skel/.bashrc \
    regexp="^PS1=.*h\.GIS.lab(.*).*$" \
    line='PS1="\[$(tput bold)\]\u@\h.GIS.lab({{ GISLAB_UNIQUE_ID }}):\w\\$\[$(tput sgr0)\] "' \
    state=present


# configuration files
- name: Create backup of clean user account skeleton at first run
  shell: cp -a /etc/skel /etc/skel.clean
  args:
    executable: /bin/bash
    creates: /etc/skel.clean/.bashrc

- name: Re-create user account skeleton from clean backup
  shell: rm -rf /etc/skel && cp -a /etc/skel.clean /etc/skel
  args:
    executable: /bin/bash


- name: Prepare .config directory in skeleton
  file: path=/etc/skel/.config state=directory owner=root group=root

- name: Prepare autostart directory in skeleton
  file: path=/etc/skel/.config/autostart state=directory owner=root group=root


- name: Install filesystem bookmarks
  template: src="{{ item.src }}" dest="{{ item.dest }}" owner=root group=root
  with_items:
  - { src: bookmarks/gtk-bookmarks.j2, dest: /etc/skel/.gtk-bookmarks }


- name: Install Conky configuration
  template: src="{{ item.src }}" dest="{{ item.dest }}" owner=root group=root
  with_items:
    - { src: conky/conkyrc.j2, dest: /etc/skel/.conkyrc }
    - { src: conky/conky.desktop.j2, dest: /etc/skel/.config/autostart/conky.desktop }


- name: Install Mutt configuration
  template: src="{{ item.src }}" dest="{{ item.dest }}" owner=root group=root
  with_items:
    - { src: mutt/muttrc.j2, dest: /etc/skel/.muttrc }


- name: Prepare Pidgin directory in skeleton
  file: path=/etc/skel/.purple state=directory owner=root group=root

- name: Install Pidgin configuration
  template: src="{{ item.src }}" dest="{{ item.dest }}" owner=root group=root
  with_items:
    - { src: pidgin/accounts.xml.j2, dest: /etc/skel/.purple/accounts.xml }
    - { src: pidgin/blist.xml.j2, dest: /etc/skel/.purple/blist.xml }


- name: Install PGAdmin configuration
  template: src="{{ item.src }}" dest="{{ item.dest }}" owner=root group=root
  with_items:
    - { src: pgadmin3/pgadmin3.j2, dest: /etc/skel/.pgadmin3 }


- name: Prepare QGIS directories
  file: path={{ item }} state=directory owner=root group=root
  with_items:
    - /etc/skel/.config/QGIS
    - /etc/skel/.qgis2
    - /etc/skel/.qgis2/composer_templates

- name: Install QGIS configuration
  template: src="{{ item.src }}" dest="{{ item.dest }}" owner=root group=root
  with_items:
    - { src: qgis/QGIS2.conf.j2, dest: /etc/skel/.config/QGIS/QGIS2.conf }
    - { src: qgis/composer_templates/north-arrow.svg.j2, dest: /etc/skel/.qgis2/composer_templates/north-arrow.svg }
    - { src: qgis/composer_templates/print-template-a4.qpt.j2, dest: /etc/skel/.qgis2/composer_templates/print-template-a4.qpt }
    - { src: qgis/composer_templates/print-template-a3.qpt.j2, dest: /etc/skel/.qgis2/composer_templates/print-template-a3.qpt }


- name: Prepare GRASS directories
  file: path={{ item }} state=directory owner=root group=root
  with_items:
    - /etc/skel/.grass7
    - /etc/skel/.grassdata

- name: Install GRASS configuration
  template: src="{{ item.src }}" dest="{{ item.dest }}" owner=root group=root
  with_items:
    - { src: grass/rc.j2, dest: /etc/skel/.grass7/rc }

- name: Install GRASS locations
  copy: src="{{ item.src }}" dest="{{ item.dest }}" mode=0755 owner=root group=root
  with_items:
    - { src: static/grassdata/, dest: /etc/skel/.grassdata }


- name: Add symlinks to shared directories in skeleton
  file: src="{{ item.src }}" dest="{{ item.dest }}" owner=root group=root state=link force=yes
  with_items:
    - { src: /mnt/repository, dest: /etc/skel/Repository }
    - { src: /mnt/barrel, dest: /etc/skel/Barrel }
    - { src: /mnt/publish, dest: /etc/skel/Publish }

- name: Add symlinks to fast, in-memory file system
  file: src=/mnt/booster dest=/etc/skel/Booster owner=root group=root state=link force=yes


# storage
- name: Create home storage for new user's accounts
  file: path=/storage/home state=directory owner=root group=root


# vim:ft=ansible:
