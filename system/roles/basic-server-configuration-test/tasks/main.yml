---

- name: Generate unique string for this test run
  shell: date +%s | md5sum | head -c 24
  register: gislab_test_unique_string
  changed_when: False

- name: Set unique string for this test run
  set_fact:
    GISLAB_TEST_UNIQUE_STRING: "{{ gislab_test_unique_string.stdout }}"


- name: Get value of GISLAB_ROOT variable
  shell: echo $GISLAB_ROOT
  register: test_gislab_root
  changed_when: False

- name: Test value of GISLAB_ROOT variable
  assert:
    that: "test_gislab_root.stdout == '/opt/gislab'"
  ignore_errors: yes
  changed_when: False


- name: Get GIS.lab server FQDN
  shell: hostname --fqdn
  register: test_server_hostname
  changed_when: False

- name: Test GIS.lab server FQDN
  assert:
    that: "test_server_hostname.stdout == 'server.gis.lab'"
  ignore_errors: yes
  changed_when: False


- name: Test if GIS.lab server network IP address is assigned
  shell: ip addr show | grep "inet {{ GISLAB_NETWORK }}.5/24 brd {{ GISLAB_NETWORK }}.255 scope global"
  ignore_errors: yes
  changed_when: False


# gislab-adduser|deluser
# ordinary user account
- name: Test if GIS.lab administrator tools are on path
  shell: which gislab-help
  ignore_errors: yes
  changed_when: False

- name: Create ordinary test user account
  shell: gislab-adduser
    -g Test
    -l User
    -d "Test user account"
    -m test{{ GISLAB_TEST_UNIQUE_STRING }}@gis.lab
    -p {{ GISLAB_TEST_UNIQUE_STRING }}
    test{{ GISLAB_TEST_UNIQUE_STRING }}
  ignore_errors: yes
  changed_when: False

- name: Test if ordinary test user account exists in LDAP database
  shell: ldapsearch -Q -LLL -Y EXTERNAL -H ldapi:///
    '(&(uid=test{{ GISLAB_TEST_UNIQUE_STRING }})(uidNumber>=3000)(gidNumber=3001)(homeDirectory=/mnt/home/test{{ GISLAB_TEST_UNIQUE_STRING }})(gecos=Test User)(description=Test user account))'
    | grep test{{ GISLAB_TEST_UNIQUE_STRING }}
  ignore_errors: yes
  changed_when: False

- name: Get info on home directory of ordinary test user
  stat: path=/mnt/home/test{{ GISLAB_TEST_UNIQUE_STRING }}
  register: test_user_home_dir
  ignore_errors: yes
  changed_when: False

- name: Test if home directory of ordinary test user exists and is a directory
  assert:
    that: "test_user_home_dir.stat.isdir is defined and test_user_home_dir.stat.isdir"
  ignore_errors: yes
  changed_when: False

- name: Test if ordinary test user account exists in PostgreSQL
  shell: psql -U postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='test{{ GISLAB_TEST_UNIQUE_STRING }}'" | grep 1
  ignore_errors: yes
  changed_when: False

- name: Test if PostgreSQL ordinary test user is a member of gislabusers group
  shell: psql -U postgres -tAc "SELECT string_agg(rolname, ',')
    FROM pg_user JOIN pg_auth_members ON (pg_user.usesysid=pg_auth_members.member)
    JOIN pg_roles ON (pg_roles.oid=pg_auth_members.roleid)
    WHERE pg_user.usename='test{{ GISLAB_TEST_UNIQUE_STRING }}'"
    | grep gislabusers
  ignore_errors: yes
  changed_when: False

- name: Test if PostgreSQL schema exists for ordinary test user
  shell: psql -U postgres -d gislab -tAc "SELECT 1
    FROM information_schema.schemata
    WHERE schema_name='test{{ GISLAB_TEST_UNIQUE_STRING }}'"
    | grep 1
  ignore_errors: yes
  changed_when: False

- name: Get info on publish directory of ordinary test user
  stat: path=/storage/publish/test{{ GISLAB_TEST_UNIQUE_STRING }}
  register: test_user_publish_dir
  ignore_errors: yes
  changed_when: False

- name: Test if publish directory of ordinary test user exists and is a directory
  assert:
    that: "test_user_publish_dir.stat.isdir is defined and test_user_publish_dir.stat.isdir"
  ignore_errors: yes
  changed_when: False


# gislab-backupuser|restoreuser
- name: Create test files in user's directories
  shell: touch {{ item }}
  with_items:
    - /mnt/home/test{{ GISLAB_TEST_UNIQUE_STRING }}/test.txt
    - /mnt/publish/test{{ GISLAB_TEST_UNIQUE_STRING }}/test.txt
  ignore_errors: yes
  changed_when: False

- name: Backup test user account
  shell: gislab-backupuser
    -d /tmp/test{{ GISLAB_TEST_UNIQUE_STRING }}_backupuser
    test{{ GISLAB_TEST_UNIQUE_STRING }}
  ignore_errors: yes
  changed_when: False

- name: Restore test user account
  shell: gislab-deluser -f test{{ GISLAB_TEST_UNIQUE_STRING }}
    && gislab-restoreuser
    -f /tmp/test{{ GISLAB_TEST_UNIQUE_STRING }}_backupuser/$(ls -1 /tmp/test{{ GISLAB_TEST_UNIQUE_STRING }}_backupuser)
    test{{ GISLAB_TEST_UNIQUE_STRING }}
  ignore_errors: yes
  changed_when: False

- name: Test if test user's file data is restored
  shell: file {{ item }}
  with_items:
    - /mnt/home/test{{ GISLAB_TEST_UNIQUE_STRING }}/.config/QGIS/QGIS2.conf
    - /mnt/home/test{{ GISLAB_TEST_UNIQUE_STRING }}/.grass7
    - /mnt/home/test{{ GISLAB_TEST_UNIQUE_STRING }}/test.txt
    - /mnt/publish/test{{ GISLAB_TEST_UNIQUE_STRING }}/test.txt
  ignore_errors: yes
  changed_when: False


# superuser account
- name: Create superuser test user account
  shell: gislab-adduser
    -s
    -g Test
    -l SuperUser
    -d "Test superuser account"
    -m testsu{{ GISLAB_TEST_UNIQUE_STRING }}@gis.lab
    -p {{ GISLAB_TEST_UNIQUE_STRING }}
    testsu{{ GISLAB_TEST_UNIQUE_STRING }}
  ignore_errors: yes
  changed_when: False

- name: Test if test superuser is member of GIS.lab gislabadmins group
  shell: ldapsearch -Q -LLL -Y EXTERNAL -H ldapi:/// '(&(objectClass=posixGroup)(cn=gislabadmins)(gidNumber=3000)(memberUid=testsu{{ GISLAB_TEST_UNIQUE_STRING }}))'
    | grep testsu{{ GISLAB_TEST_UNIQUE_STRING }}
  ignore_errors: yes
  changed_when: False

- name: Test if PostgreSQL test superuser is a member of gislabadmins group
  shell: psql -U postgres -tAc "SELECT 1
    FROM pg_user JOIN pg_auth_members ON (pg_user.usesysid=pg_auth_members.member)
    JOIN pg_roles ON (pg_roles.oid=pg_auth_members.roleid)
    WHERE pg_user.usename='testsu{{ GISLAB_TEST_UNIQUE_STRING }}' AND rolname='gislabadmins'"
    | grep 1
  ignore_errors: yes
  changed_when: False


- name: Remove test users accounts
  shell: gislab-deluser -f "{{ item }}"
  with_items:
    - test{{ GISLAB_TEST_UNIQUE_STRING }}
    - testsu{{ GISLAB_TEST_UNIQUE_STRING }}
  ignore_errors: yes
  changed_when: False


# vim:ft=ansible:
