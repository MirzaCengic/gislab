---
#
### GIS.lab DESKTOP CLIENT ###
#
# Install and configure GIS.lab desktop client.
#
# Logging: /var/log/syslog


- name: Install packages
  apt: pkg={{item}} force=yes install_recommends=no state=latest
  with_items:
    - ltsp-server-standalone
    - tftpd-hpa


- name: Stop GIS.lab network machines before updating client image
  service: name=serf state=stopped

- name: Stop NBD server before updating client image
  # stopping NBD before updating image to prevent service crashing
  service: name=nbd state=stopped

# System
- name: Flush client installation directory
  file: path="{{ GISLAB_INSTALL_CLIENT_ROOT }}" state=absent

- name: Create client installation directory
  file: path="{{ GISLAB_INSTALL_CLIENT_ROOT }}" state=directory

- name: Install client files
  copy: src=static/system/ dest="{{ GISLAB_INSTALL_CLIENT_ROOT }}"


# Client installation scripts
- name: Create clean copy of default Ubuntu client installation scripts
  command: cp -a /usr/share/ltsp/plugins/ltsp-build-client/Ubuntu /usr/share/ltsp/plugins/ltsp-build-client/Ubuntu.clean
  args:
    creates: /usr/share/ltsp/plugins/ltsp-build-client/Ubuntu.clean/000-basic-configuration

- name: Clean client installation scripts
  command: "{{ item }}"
  with_items:
    - rm -rf /usr/share/ltsp/plugins/ltsp-build-client/Ubuntu
    - cp -a /usr/share/ltsp/plugins/ltsp-build-client/Ubuntu.clean /usr/share/ltsp/plugins/ltsp-build-client/Ubuntu

- name: Install custom client installation scripts
  shell: "cp -a {{ GISLAB_INSTALL_CLIENT_ROOT }}/ltsp/* /usr/share/ltsp/plugins/ltsp-build-client/Ubuntu/"


# Image
- name: Build GIS.lab client image (can take very long time)
  shell: set -a; source /etc/gislab_version;
         GISLAB_CLIENT_INSTALL_PACKAGES_DEFAULT="{{ GISLAB_CLIENT_INSTALL_PACKAGES_DEFAULT|join(' ') }}"
         GISLAB_CLIENT_INSTALL_PACKAGES_GIS="{{ GISLAB_CLIENT_INSTALL_PACKAGES_GIS|join(' ') }}"
         GISLAB_CLIENT_REMOVE_PACKAGES="{{ GISLAB_CLIENT_REMOVE_PACKAGES|join(' ') }}"
         bash {{ GISLAB_INSTALL_CLIENT_ROOT }}/install.sh {{ gislab_build_client_opts }} > /var/log/gislab-build-client.log
  args:
    executable: /bin/bash
  notify:
    - service nbd-server restart

- name: Update SSH keys and kernel
  command: "{{ item }}"
  with_items:
    - ltsp-update-sshkeys
    - ltsp-update-kernels
  notify:
    - service nbd-server restart

# Custom GIS.lab client DHCP client
- name: Create directory for DHCP client script
  file: path="{{ GISLAB_INSTALL_CLIENT_ROOT }}/udhcp" state=directory

- name: Install DHCP client script
  template: src=udhcp/udhcp.j2 dest="{{ GISLAB_INSTALL_CLIENT_ROOT }}/udhcp/udhcp"

- name: Modify DHCP client to be sure that client will always get IP from correct server
  script: scripts/generate-initrd.sh


# LTSP
- name: Configure LTSP server
  template: src=lts/lts.conf.j2 dest=/var/lib/tftpboot/ltsp/i386/lts.conf

- name: Do not allow overriding of DHCP server configuration by LTSP (keep using configuration in /etc/dhcp)
  file: path=/etc/ltsp/dhcpd.conf state=absent


# PXE boot
- name: Disable plymouth screen for better client troubleshooting on boot
  template: src=boot-pxe/default.j2 dest=/var/lib/tftpboot/ltsp/i386/pxelinux.cfg/default


# HTTP boot (alternative method using iPXE)
# To boot via HTTP, client machine must boot iPXE boot image first. This boot image will launch HTTP boot.
# Prepared iPXE boot image exists in 'http-boot/gislab-client-loader.iso.gz' of GIS.lab source code
# or can be created by running '$ make bin/ipxe.iso EMBED=boot-gislab.ipxe' in iPXE source code.

- name: Install HTTP boot files (files can be launched by http://boot.gis.lab/<file> or http://GISLAB_NETWORK.5/<file>)
  file: src={{ item.src }} dest={{ item.dest }} owner=root group=root state=link
  with_items:
    - { src: "/var/lib/tftpboot/ltsp/i386/vmlinuz", dest: "/var/www/default/vmlinuz"}
    - { src: "/var/lib/tftpboot/ltsp/i386/initrd.img", dest: "/var/www/default/initrd.img"}

- name: Install HTTP boot script
  template: src=boot-http/i386.j2 dest=/var/www/default/i386


- name: Start NBD server again
  service: name=nbd state=started

- name: Start GIS.lab network machines again
  service: name=serf state=started


- meta: flush_handlers
