---
#
### GIS.lab DESKTOP CLIENT ###
#
# Install and configure GIS.lab desktop client.
#
# Logging: /storage/log/syslog /storage/log/kern.log


- name: Install packages
  apt: pkg={{item}} force=yes install_recommends=no state=latest
  with_items:
    - debootstrap
    - tftpd-hpa
    - nbd-server
    - squashfs-tools


# Prepare installation directory
- name: Purge GIS.lab client installation directory
  file: dest={{ GISLAB_INSTALL_CLIENT_ROOT }} state=absent

- name: Create GIS.lab client install directory
  file: dest={{ GISLAB_INSTALL_CLIENT_ROOT }} state=directory


# Copy apt cache
- name: Prepare apt cache directory if no apt proxy configured
  file: dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/var/cache/apt/archives state=directory recurse=yes
  when: GISLAB_APT_HTTP_PROXY|default(None) == None and GISLAB_SERVER_ARCHITECTURE == 'i386'

- name: Copy apt cache from server to client if no apt proxy configured
  shell: cp -a /var/cache/apt/archives/*.deb {{ GISLAB_INSTALL_CLIENT_ROOT }}/var/cache/apt/archives/ 2>/dev/null || true
  args:
    executable: /bin/bash
  when: GISLAB_APT_HTTP_PROXY|default(None) == None and GISLAB_SERVER_ARCHITECTURE == 'i386'


# Debootstrap
- name: Install base system (without apt proxy)
  command: debootstrap --arch i386 {{ ansible_distribution_release }} {{ GISLAB_INSTALL_CLIENT_ROOT }} http://{{ GISLAB_APT_REPOSITORY_COUNTRY_MIRROR }}.archive.ubuntu.com/ubuntu/
  when: GISLAB_APT_HTTP_PROXY|default(None) == None

- name: Install base system (with apt proxy)
  command: debootstrap --arch i386 {{ ansible_distribution_release }} {{ GISLAB_INSTALL_CLIENT_ROOT }} {{ GISLAB_APT_HTTP_PROXY }}/{{ GISLAB_APT_REPOSITORY_COUNTRY_MIRROR }}.archive.ubuntu.com/ubuntu/
  when: GISLAB_APT_HTTP_PROXY|default(None) != None


# Locale
- name: Generate locale
  command: chroot {{ GISLAB_INSTALL_CLIENT_ROOT }} locale-gen en_US.UTF-8

- name: Copy locale default configuration file
  command: cp /etc/default/locale {{ GISLAB_INSTALL_CLIENT_ROOT }}/etc/default/locale

# Timezone
- name: Configure timezone
  command: cp {{ item }} {{ GISLAB_INSTALL_CLIENT_ROOT }}{{ item }}
  with_items:
    - /etc/timezone
    - /etc/localtime

# Modules
- name: Default kernel modules
  lineinfile: dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/etc/modules line=lp state=present

# root password
- name: Lock root password
  command: chroot {{ GISLAB_INSTALL_CLIENT_ROOT }} passwd -l root


# Network configuration
- name: Install empty hostname file
  shell: echo > {{ GISLAB_INSTALL_CLIENT_ROOT }}/etc/hostname

- name: Set alias for loopback network interface in /etc/hostname
  template: src=hosts/hosts.j2 dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/etc/hosts

- name: Configure loopback network interface
  template: src=network/interfaces.j2 dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/etc/network/interfaces

- name: Set GIS.lab server as DNS resolver
# /etc/resolv.conf is dynamically generated by resolvconf package. Content of 'head' file is always placed on top of
# dynamically generate 'resolv.conf' file
  template: src=resolvconf/resolv.conf.j2 dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/etc/resolvconf/resolv.conf.d/head

- name: Clean resolvconf files
# 'tail' file is installed as symbolic link to 'original' file by default (it may change in next Ubuntu versions).
# 'original' file is containing 'resolv.conf' configuration from GIS.lab server. We do not want this, thus this task
# is creating clean 'tail' file
  command: "{{ item }}"
  with_items:
    - rm -f {{ GISLAB_INSTALL_CLIENT_ROOT }}/etc/resolvconf/resolv.conf.d/tail
    - touch {{ GISLAB_INSTALL_CLIENT_ROOT }}/etc/resolvconf/resolv.conf.d/tail


# Apt
- name: Purge apt configuration directory
  file: dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/etc/apt state=absent

- name: Copy apt configuration from server
  command: cp -a /etc/apt {{ GISLAB_INSTALL_CLIENT_ROOT }}/etc/


# Mount necessary filesystems in chroot
- name: Mount /dev/pts and /proc
  command: chroot {{ GISLAB_INSTALL_CLIENT_ROOT }} mount {{ item.opts }} {{ item.src }} {{ item.dest }}
  with_items:
    - { src: "devpts", dest: "/dev/pts", opts: "-t devpts -o rw,noexec,nosuid,gid=5,mode=620" }
    - { src: "proc", dest: "/proc", opts: "-t proc" }


# Daemons handling
- name: Backup original 'start-stop-daemon' binary
  command: mv {{ GISLAB_INSTALL_CLIENT_ROOT }}/sbin/start-stop-daemon {{ GISLAB_INSTALL_CLIENT_ROOT }}/sbin/start-stop-daemon.real

- name: Avoid running daemons while installing
  template: src={{ item.src }} dest={{ GISLAB_INSTALL_CLIENT_ROOT }}{{ item.dest }} mode=0755
  with_items:
    - { src: "bin/policy-rc.d.j2", dest: "/usr/sbin/policy-rc.d" }
    - { src: "bin/start-stop-daemon.j2", dest: "/sbin/start-stop-daemon" }


# System upgrade
- name: Update apt cache
  shell: "export DEBIAN_FRONTEND=noninteractive
    && chroot {{ GISLAB_INSTALL_CLIENT_ROOT }} apt-get {{ apt_get_opts }} update"
  args:
    executable: /bin/bash

- name: Upgrade system
  shell: "export DEBIAN_FRONTEND=noninteractive
    && chroot {{ GISLAB_INSTALL_CLIENT_ROOT }} apt-get {{ apt_get_opts }} dist-upgrade"
  args:
    executable: /bin/bash


# Install packages
- name: Install GIS.lab client minimal OS packages
  shell: "export DEBIAN_FRONTEND=noninteractive
    && chroot {{ GISLAB_INSTALL_CLIENT_ROOT }} apt-get {{ apt_get_opts }} install ubuntu-standard"
  args:
    executable: /bin/bash

- name: Install GIS.lab client default packages
  shell: "export DEBIAN_FRONTEND=noninteractive
    && chroot {{ GISLAB_INSTALL_CLIENT_ROOT }} apt-get {{ apt_get_opts }} install {{ GISLAB_CLIENT_INSTALL_PACKAGES_DEFAULT|join(' ') }}"
  args:
    executable: /bin/bash

- name: Install GIS.lab client GIS packages
  shell: "export DEBIAN_FRONTEND=noninteractive
    && chroot {{ GISLAB_INSTALL_CLIENT_ROOT }} apt-get --no-install-recommends {{ apt_get_opts }} install {{ GISLAB_CLIENT_INSTALL_PACKAGES_GIS|join(' ') }}"
  args:
    executable: /bin/bash

- name: Install GIS development packages
  shell: "export DEBIAN_FRONTEND=noninteractive
    && chroot {{ GISLAB_INSTALL_CLIENT_ROOT }} apt-get --no-install-recommends {{ apt_get_opts }} install {{ GISLAB_CLIENT_INSTALL_PACKAGES_DEVELOPMENT|join(' ') }}"
  args:
    executable: /bin/bash
  when: GISLAB_CLIENT_GIS_DEVELOPMENT_SUPPORT

- name: Set more permissive mode for PTRACE (do not limit PTRACE only to direct child processes)
  lineinfile: dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/etc/sysctl.d/10-ptrace.conf line="kernel.yama.ptrace_scope = 0" state=present
  when: GISLAB_CLIENT_GIS_DEVELOPMENT_SUPPORT


# Language support
- name: Install language support
  shell: "export DEBIAN_FRONTEND=noninteractive
    && chroot {{ GISLAB_INSTALL_CLIENT_ROOT }} apt-get {{ apt_get_opts }} install language-pack-{{ item }} 2>/dev/null || echo 'LANGUAGE DOES NOT EXIST'"
  with_items: GISLAB_CLIENT_LANGUAGES
  when: GISLAB_CLIENT_LANGUAGES|default(None) != None

- name: Install language support for Firefox
  shell: "export DEBIAN_FRONTEND=noninteractive
    && chroot {{ GISLAB_INSTALL_CLIENT_ROOT }} apt-get {{ apt_get_opts }} install firefox-locale-{{ item }} 2>/dev/null || echo 'LANGUAGE DOES NOT EXIST'"
  with_items: GISLAB_CLIENT_LANGUAGES
  when: GISLAB_CLIENT_LANGUAGES|default(None) != None

- name: Install language support for Libreoffice
  shell: "export DEBIAN_FRONTEND=noninteractive
    && chroot {{ GISLAB_INSTALL_CLIENT_ROOT }} apt-get {{ apt_get_opts }} install libreoffice-l10n-{{ item }} 2>/dev/null || echo 'LANGUAGE DOES NOT EXIST'"
  with_items: GISLAB_CLIENT_LANGUAGES
  when: GISLAB_CLIENT_LANGUAGES|default(None) != None

- name: Install language support for dictionary
  shell: "export DEBIAN_FRONTEND=noninteractive
    && chroot {{ GISLAB_INSTALL_CLIENT_ROOT }} apt-get {{ apt_get_opts }} install myspell-{{ item }} 2>/dev/null || echo 'LANGUAGE DOES NOT EXIST'"
  with_items: GISLAB_CLIENT_LANGUAGES
  when: GISLAB_CLIENT_LANGUAGES|default(None) != None

- name: Install language support for thesaurus
  shell: "export DEBIAN_FRONTEND=noninteractive
    && chroot {{ GISLAB_INSTALL_CLIENT_ROOT }} apt-get {{ apt_get_opts }} install mythes-{{ item }} 2>/dev/null || echo 'LANGUAGE DOES NOT EXIST'"
  with_items: GISLAB_CLIENT_LANGUAGES
  when: GISLAB_CLIENT_LANGUAGES|default(None) != None


# Remove not needed packages
- name: Remove packages
  shell: "export DEBIAN_FRONTEND=noninteractive
    && chroot {{ GISLAB_INSTALL_CLIENT_ROOT }} {{ item }}"
  args:
    executable: /bin/bash
  with_items:
    - apt-get --assume-yes purge {{ GISLAB_CLIENT_REMOVE_PACKAGES|join(' ') }}
    - apt-get --assume-yes autoremove


# Install kernel
- name: Create configuration file for kernel setup
  template: src=kernel/kernel-img.conf.j2 dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/etc/kernel-img.conf

- name: Install kernel
  shell: "export DEBIAN_FRONTEND=noninteractive
    && chroot {{ GISLAB_INSTALL_CLIENT_ROOT }} apt-get --no-install-recommends {{ apt_get_opts }} install linux-image-generic-lts-raring linux-headers-generic-lts-raring"
  args:
    executable: /bin/bash

    
# Install VirtualBox Guest additions.
# Latest kernel supported by VirtualBox Guest additions on Ubuntu 12.04 is 3.8
# else install VirtualBox additions from Ubuntu repository - could not match version used on client
# for manual installation run: $ dkms install -m virtualbox-guest/<vbox-version> -k <kernel-version>/i386

- name: Install build-essential package if VirtualBox Guest additions are going to be build from ISO file
  shell: "export DEBIAN_FRONTEND=noninteractive
    && chroot {{ GISLAB_INSTALL_CLIENT_ROOT }} apt-get --no-install-recommends {{ apt_get_opts }} install build-essential"
  args:
    executable: /bin/bash
  when: GISLAB_CLIENT_VIRTUALBOX_SUPPORT
        and GISLAB_CLIENT_VIRTUALBOX_ADDITIONS_ISO|default(None) != None

- name: Create directory for VirtualBox Guest additions ISO file and mount point
  file: dest={{ GISLAB_INSTALL_CLIENT_ROOT }}{{ item }} state=directory recurse=yes
  with_items:
    - /tmp/virtualbox/iso
    - /tmp/virtualbox/mnt
  when: GISLAB_CLIENT_VIRTUALBOX_SUPPORT
        and GISLAB_CLIENT_VIRTUALBOX_ADDITIONS_ISO|default(None) != None

- name: Copy VirtualBox Guest additions ISO file
  copy: src={{ GISLAB_CLIENT_VIRTUALBOX_ADDITIONS_ISO }} dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/tmp/virtualbox/iso
  when: GISLAB_CLIENT_VIRTUALBOX_SUPPORT
        and GISLAB_CLIENT_VIRTUALBOX_ADDITIONS_ISO|default(None) != None

- name: Mount VirtualBox Guest additions ISO file
  command: chroot {{ GISLAB_INSTALL_CLIENT_ROOT }} mount -o loop /tmp/virtualbox/iso/VBoxGuestAdditions.iso /tmp/virtualbox/mnt
  when: GISLAB_CLIENT_VIRTUALBOX_SUPPORT
        and GISLAB_CLIENT_VIRTUALBOX_ADDITIONS_ISO|default(None) != None

- name: Install VirtualBox Guest additions from ISO file
  shell: "export BUILD_TARGET_ARCH=x86
    && chroot {{ GISLAB_INSTALL_CLIENT_ROOT }} /bin/bash /tmp/virtualbox/mnt/VBoxLinuxAdditions.run | tee /dev/null"
  args:
    executable: /bin/bash
  when: GISLAB_CLIENT_VIRTUALBOX_SUPPORT
        and GISLAB_CLIENT_VIRTUALBOX_ADDITIONS_ISO|default(None) != None

- name: Unmount VirtualBox Guest additions ISO file
  command: chroot {{ GISLAB_INSTALL_CLIENT_ROOT }} umount /tmp/virtualbox/mnt
  when: GISLAB_CLIENT_VIRTUALBOX_SUPPORT
        and GISLAB_CLIENT_VIRTUALBOX_ADDITIONS_ISO|default(None) != None

- name: Clean up after VirtualBox Guest additions installation from ISO file
  file: dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/tmp/virtualbox state=absent
  when: GISLAB_CLIENT_VIRTUALBOX_SUPPORT
        and GISLAB_CLIENT_VIRTUALBOX_ADDITIONS_ISO|default(None) != None


- name: Install VirtualBox Guest additions from repository
  shell: "export BUILD_TARGET_ARCH=x86
    && chroot {{ GISLAB_INSTALL_CLIENT_ROOT }} apt-get --no-install-recommends {{ apt_get_opts }} install {{ item }}"
  with_items:
    - virtualbox-guest-dkms virtualbox-guest-x11 virtualbox-guest-utils
  args:
    executable: /bin/bash
  when: GISLAB_CLIENT_VIRTUALBOX_SUPPORT
        and GISLAB_CLIENT_VIRTUALBOX_ADDITIONS_ISO|default(None) == None


# fstab
- name: Configure mount points
  template: src=fstab/fstab.j2 dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/etc/fstab

- name: Divert /etc/mtab and point it to /proc/mounts
  command: chroot {{ GISLAB_INSTALL_CLIENT_ROOT }} {{ item }}
  with_items:
    - dpkg-divert --add --rename --divert /etc/mtab.real /etc/mtab
    - ln -sf /proc/mounts /etc/mtab


# NFS
- name: Configure NFS
  template: src=nfs/idmapd.conf.j2 dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/etc/idmapd.conf

- name: Create mount points for shared directories
  file: dest={{ GISLAB_INSTALL_CLIENT_ROOT }}{{ item }} state=directory
  with_items:
    - /mnt/repository
    - /mnt/barrel
    - /mnt/publish


# LDAP
- name: Enable LDAP authentication
  shell: "export DEBIAN_FRONTEND=noninteractive
    && chroot {{ GISLAB_INSTALL_CLIENT_ROOT }} {{ item }}"
  with_items:
    - pam-auth-update --force
    - auth-client-config -t nss -p lac_ldap
  args:
    executable: /bin/bash

- name: Install LDAP configuration files
  template: src={{ item.src }} dest={{ GISLAB_INSTALL_CLIENT_ROOT }}{{ item.dest }}
  with_items:
    - { src: "ldap/ldap/ldap.conf.j2", dest: "/etc/ldap/ldap.conf" }
    - { src: "ldap/ldap.conf.j2", dest: "/etc/ldap.conf" }

- name: Install sudo-ldap package
  shell: "export DEBIAN_FRONTEND=noninteractive
    && export SUDO_FORCE_REMOVE=yes
    && chroot {{ GISLAB_INSTALL_CLIENT_ROOT }} apt-get --no-install-recommends {{ apt_get_opts }} install sudo-ldap"
  args:
    executable: /bin/bash

- name: Install NSS configuration file (configure sudo to use LDAP)
  template: src=nsswitch/nsswitch.conf.j2 dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/etc/nsswitch.conf


# NTP
- name: Configure client to use server.gis.lab for setting time at start
  template: src=ntp/ntpdate.j2 dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/etc/default/ntpdate


# GIS.lab client tools
- name: Create directory for GIS.lab shell functions library
  file: dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/usr/local/gislab state=directory

- name: Install GIS.lab client tools
  copy: src=static/gislab-client-tools/ dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/usr/local/bin/ mode=0755


# gislab version
- name: Install '/etc/gislab_version' file
  command: cp /etc/gislab_version {{ GISLAB_INSTALL_CLIENT_ROOT }}/etc/gislab_version


# GIS.lab client desktop customizations
- name: Configure default home directories structure
  template: src=desktop/home-directories/user-dirs.defaults.j2 dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/etc/xdg/user-dirs.defaults

- name: Install XFCE desktop configuration file
  template: src=desktop/xfce/xfce4-desktop.xml.j2 dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/etc/xdg/xdg-xubuntu/xfce4/xfconf/xfce-perchannel-xml/xfce4-desktop.xml

- name: Install xfce panel configuration file
  template: src=desktop/panel/default.xml dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/etc/xdg/xdg-xubuntu/xfce4/panel/default.xml


- name: Install xfce menu configuration file
  copy: src=static/desktop/menu/xfce-applications.menu dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/etc/xdg/xdg-xubuntu/menus/xfce-applications.menu

- name: Install desktop applications files
  copy: src=static/desktop/menu/applications/ dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/usr/share/applications/

- name: Install desktop directories files
  copy: src=static/desktop/menu/directories/  dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/usr/share/desktop-directories/


# Xubuntu Greybird theme originally provides very thin window borders, which are very
# difficult to grab and resize. This is fixed version of Greybird (taken from OSGeo Live CD)
- name: Install theme
  copy: src=static/desktop/themes/greybird/ dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/usr/share/themes/Greybird/xfwm4/

- name: Install wallpapers
  copy: src=static/desktop/wallpapers/ dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/usr/share/xfce4/backdrops/

- name: Install icons
  copy: src=static/desktop/icons/ dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/usr/share/pixmaps/


# Start Gnome Keyring also in XFCE session
- name: Fix gnome keyring
  command: sed -i "s/OnlyShowIn=GNOME;Unity;/OnlyShowIn=GNOME;Unity;XFCE/" {{ GISLAB_INSTALL_CLIENT_ROOT }}/etc/xdg/autostart/gnome-keyring-pkcs11.desktop


- name: Remove plain XFCE and XUbuntu sessions
  shell: rm -f {{ GISLAB_INSTALL_CLIENT_ROOT }}/usr/share/xsessions/*.desktop

- name: Install GIS.lab desktop client session
  # session file must be called 'xubuntu.desktop', otherwise LightDM will set variable DESKTOP_SESSION to invalid value
  template: src=desktop/xsession/gislab-client.desktop.j2 dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/usr/share/xsessions/xubuntu.desktop

# Disable session services
- name: Disable useless session services
  file: dest={{ GISLAB_INSTALL_CLIENT_ROOT }}{{ item }} state=absent
  with_items:
    - /etc/xdg/autostart/jockey-gtk.desktop
    - /etc/xdg/autostart/jockey-kde.desktop
    - /etc/xdg/autostart/update-notifier.desktop


# Disable system services
- name: Disable useless system services
  command: "rm -f {{ GISLAB_INSTALL_CLIENT_ROOT }}/etc/rc?.d/???{{ item }}
                  {{ GISLAB_INSTALL_CLIENT_ROOT }}/etc/init.d/{{ item }}
                  {{ GISLAB_INSTALL_CLIENT_ROOT }}/etc/init/{{ item }}.conf"
  with_items:
    - alsa-restore
    - alsa-store
    - grub-common
    - modemmanager
    - nbd-client
    - plymouth-stop
    - rfkill-store
    - tty2
    - tty3
    - tty4
    - tty5
    - tty6
    - unattended-upgrades
    - urandom
    - ureadahead
    - ureadahead-other


# Replacing shutdown commands with simple script, which will umount all network disks and immediately power off
# machine without trying to cleanly stop services. This is a workaround to a problems with various shutdown problems
# caused by network mounted root and NBD itself (see LP #696454).

# 'reboot' binary performs 'reboot' and also 'poweroff' task depending on the file name called. This is the reason why
# '/sbin/poweroff' is a symlink to '/sbin/reboot'. This fix takes to account this behavior.

- name: Create directory for original 'reboot' command
  file: dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/sbin/gislab state=directory

- name: Remove original 'poweroff' command (symlink)
  file: dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/sbin/poweroff state=absent

- name: Remove original 'shutdown' command
  file: dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/sbin/poweroff state=absent

- name: Move 'reboot' binary
  command: mv {{ GISLAB_INSTALL_CLIENT_ROOT }}/sbin/reboot {{ GISLAB_INSTALL_CLIENT_ROOT }}/sbin/gislab/reboot

- name: Re-create poweroff command as a symlink to moved reboot binary
  command: ln -sf reboot {{ GISLAB_INSTALL_CLIENT_ROOT }}/sbin/gislab/poweroff

- name: Install custom reboot script
  copy: src=static/bin/reboot dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/sbin/reboot mode=0755

- name: Install custom poweroff script
  copy: src=static/bin/poweroff dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/sbin/poweroff mode=0755

- name: Install custom shutdown script
  copy: src=static/bin/poweroff dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/sbin/shutdown mode=0755


# Statistics
- name: Install munin-node package
  shell: "export DEBIAN_FRONTEND=noninteractive
    && chroot {{ GISLAB_INSTALL_CLIENT_ROOT }} apt-get {{ apt_get_opts }} install munin-node"
  args:
    executable: /bin/bash

- name: Install munin configuration file
  template: src=munin-node/munin-node.conf.j2 dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/etc/munin/munin-node.conf

- name: Disable all munin plugins
  shell: "{{ item }}"
  with_items:
    - rm -f {{ GISLAB_INSTALL_CLIENT_ROOT }}/etc/munin/plugins/*
    - echo > {{ GISLAB_INSTALL_CLIENT_ROOT }}/etc/munin/plugin-conf.d/munin-node

- name: Enable only required munin plugins
  file: src={{ item.src }} dest={{ GISLAB_INSTALL_CLIENT_ROOT }}{{ item.dest }} state=link force=yes
  with_items:
    - { src: "/usr/share/munin/plugins/cpu", dest: "/etc/munin/plugins/cpu" }
    - { src: "/usr/share/munin/plugins/load", dest: "/etc/munin/plugins/load" }
    - { src: "/usr/share/munin/plugins/memory", dest: "/etc/munin/plugins/memory" }
    - { src: "/usr/share/munin/plugins/processes", dest: "/etc/munin/plugins/processes" }
    - { src: "/usr/share/munin/plugins/uptime", dest: "/etc/munin/plugins/uptime" }
    - { src: "/usr/share/munin/plugins/vmstat", dest: "/etc/munin/plugins/vmstat" }


# Install GIS.lab client image building scripts
- name: Create directory for GIS.lab client init scripts and tools
  file: dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/usr/share/gislab state=directory

- name: Install NBI update script
  copy: src=static/bin/gislab-update-nbi dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/usr/share/gislab/gislab-update-nbi mode=0755

- name: Create symlinks to NBI update script for kernel installation hook
  file: src=/usr/share/gislab/gislab-update-nbi dest={{ GISLAB_INSTALL_CLIENT_ROOT }}{{ item }} state=link force=yes
  with_items:
    - /etc/kernel/postinst.d/gislab-update-nbi
    - /etc/kernel/postrm.d/gislab-update-nbi


# Initramfs-tools and init
- name: Create directories for initramfs-tools
  file: dest={{ GISLAB_INSTALL_CLIENT_ROOT }}{{ item }} state=directory recurse=yes
  with_items:
    - /usr/share/initramfs-tools/conf.d
    - /usr/share/initramfs-tools/hooks
    - /usr/share/initramfs-tools/scripts/init-bottom
    - /usr/share/initramfs-tools/scripts/init-premount
    - /usr/share/initramfs-tools/scripts/local-top

- name: Configure initramfs-tools
  template: src=initramfs-tools/conf.d/gislab.j2
            dest={{ GISLAB_INSTALL_CLIENT_ROOT}}/usr/share/initramfs-tools/conf.d/gislab
            mode=0644

- name: Install initramfs-tools hooks and scripts
  copy: src={{ item.src }} dest={{ GISLAB_INSTALL_CLIENT_ROOT }}{{ item.dest }} mode={{ item.mode }}
  with_items:
    - { src: "static/initramfs-tools/hooks/gislab", dest: "/usr/share/initramfs-tools/hooks/gislab", mode: "0755" }
    - { src: "static/initramfs-tools/hooks/udhcp", dest: "/usr/share/initramfs-tools/hooks/udhcp", mode: "0755" }
    - { src: "static/initramfs-tools/scripts/init-bottom/gislab", dest: "/usr/share/initramfs-tools/scripts/init-bottom/gislab", mode: "0755" }
    - { src: "static/initramfs-tools/scripts/local-top/nbd_gislab", dest: "/usr/share/initramfs-tools/scripts/local-top/nbd_gislab",  mode: "0755" }

- name: Install uDHCP client script
  template: src=initramfs-tools/scripts/init-premount/udhcp.j2
            dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/usr/share/initramfs-tools/scripts/init-premount/udhcp
            mode=0755

- name: Install system init script
  copy: src=static/init/init-gislab dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/sbin/init-gislab mode=0755

- name: Install GIS.lab init script
  copy: src=static/init/gislab-init.sh dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/usr/share/gislab/gislab-init.sh mode=0755

- name: Configure GIS.lab client service
  template: src=init/gislab.conf.j2 dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/etc/init/gislab.conf mode=0644


# Lightdm
- name: Install Lightdm configuration file
  template: src=lightdm/conf/lightdm.conf.j2 dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/etc/lightdm/lightdm.conf

- name: Install Lightdm greeter configuration
  template: src={{ item.src }} dest={{ GISLAB_INSTALL_CLIENT_ROOT }}{{ item.dest }}
  with_items:
  - { src: lightdm/conf/lightdm-gtk-greeter.conf.j2, dest: /etc/xdg/xdg-xubuntu/lightdm/lightdm-gtk-greeter.conf }
  - { src: lightdm/conf/greeter.ui.j2, dest: /usr/share/lightdm-gtk-greeter/greeter.ui }

- name: Create directory for lightdm scripts
  file: dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/usr/share/gislab/lightdm state=directory

- name: Install Lightdm scripts
  template: src={{ item.src }} dest={{ GISLAB_INSTALL_CLIENT_ROOT }}{{ item.dest }} mode=0755
  with_items:
    - { src: "lightdm/bin/session-setup-script.sh.j2", dest: "/usr/share/gislab/lightdm/session-setup-script.sh" }
    - { src: "lightdm/bin/session-cleanup-script.sh.j2", dest: "/usr/share/gislab/lightdm/session-cleanup-script.sh" }


# Worker
- name: Install worker
  shell: chroot {{ GISLAB_INSTALL_CLIENT_ROOT }} /bin/bash -c "mkdir -p /tmp/install-worker
    && cd /tmp/install-worker
    && curl --silent http://{{ GISLAB_NETWORK_SERVER_IP }}/worker.tar.gz | tar -xzf -
    && /bin/bash ./install.sh"
  args:
    executable: /bin/bash
  when: GISLAB_CLIENT_WORKER_ENABLED

- name: Clean up after worker installation
  file: dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/tmp/install-worker state=absent


# Copy apt cache
- name: Copy apt cache back from client to server if no apt proxy configured

  shell: cp -a {{ GISLAB_INSTALL_CLIENT_ROOT }}/var/cache/apt/archives/*.deb /var/cache/apt/archives/ 2>/dev/null || true
  args:
    executable: /bin/bash
  when: GISLAB_APT_HTTP_PROXY|default(None) == None and GISLAB_SERVER_ARCHITECTURE == 'i386'


# Clean apt cache
- name: Clean apt cache
  shell: "export DEBIAN_FRONTEND=noninteractive
    && chroot {{ GISLAB_INSTALL_CLIENT_ROOT }} apt-get clean"
  args:
    executable: /bin/bash

- name: Disable Apt cache proxy server
  file: path={{ GISLAB_INSTALL_CLIENT_ROOT }}/etc/apt/apt.conf.d/02proxy state=absent


# TFTP
- name: Create TFTP directory
  file: dest=/var/lib/tftpboot/gislab/i386 state=directory recurse=yes


# NBD
- name: Create NBD configuration directories
  file: dest=/etc/nbd-server/conf.d state=directory recurse=yes

- name: Install NBD configuration files
  template: src={{ item.src }} dest={{ item.dest }}
  with_items:
    - { src: "nbd-server/config.j2", dest: "/etc/nbd-server/config" }
    - { src: "nbd-server/gislab_i386.conf.j2", dest: "/etc/nbd-server/conf.d/gislab_i386.conf" }

- name: Install hosts.allow file - enable keepalive option for nbdrootd
  template: src=hosts.allow/hosts.allow.j2 dest=/etc/hosts.allow


# PXE boot
- name: Install syslinux files
  command:  cp {{ GISLAB_INSTALL_CLIENT_ROOT }}{{ item.src }} {{ GISLAB_INSTALL_CLIENT_ROOT }}{{ item.dest }}
  with_items:
    - { src: "/usr/lib/syslinux/pxelinux.0", dest: "/boot/pxelinux.0" }
    - { src: "/usr/lib/syslinux/gpxelinux.0", dest: "/boot/gpxelinux.0" }

- name: Create PXE boot configuration directory
  file: dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/boot/pxelinux.cfg state=directory

- name: Install PXE configuration file
  template: src=boot-pxe/default.j2 dest={{ GISLAB_INSTALL_CLIENT_ROOT }}/boot/pxelinux.cfg/default

  
# HTTP boot (alternative method using iPXE)
# To boot via HTTP, client machine must boot iPXE boot image first. This boot image will launch HTTP boot.
# Prepared iPXE boot image exists in 'http-boot/gislab-client-loader.iso.gz' of GIS.lab source code.

- name: Install HTTP boot files (files can be launched by http://boot.gis.lab/<file> or http://GISLAB_NETWORK.5/<file>)
  file: src={{ item.src }} dest={{ item.dest }} owner=root group=root state=link force=yes
  with_items:
    - { src: "/var/lib/tftpboot/gislab/i386/vmlinuz", dest: "/var/www/default/vmlinuz"}
    - { src: "/var/lib/tftpboot/gislab/i386/initrd.img", dest: "/var/www/default/initrd.img"}

- name: Install HTTP boot script
  template: src=boot-http/i386.j2 dest=/var/www/default/i386


# Daemons handling
- name: Enable daemons handling in chroot
  file: dest={{ GISLAB_INSTALL_CLIENT_ROOT }}{{ item }} state=absent
  with_items:
    - /usr/sbin/policy-rc.d
    - /sbin/start-stop-daemon

- name: Restore 'start-stop-daemon' binary
  command: mv {{ GISLAB_INSTALL_CLIENT_ROOT }}/sbin/start-stop-daemon.real {{ GISLAB_INSTALL_CLIENT_ROOT }}/sbin/start-stop-daemon


# Umount filesystems mounted inside chroot.
# Umount /dev/pts before /proc.
- name: Umount /dev/pts and /proc inside chroot
  command: chroot {{ GISLAB_INSTALL_CLIENT_ROOT }} umount {{ item }}
  with_items:
    - /dev/pts
    - /proc


# Build image
- name: Build GIS.lab client image
  shell: /opt/gislab/bin/gislab-client-image > /dev/null
  args:
    executable: /bin/bash

# Restart NBD server
- name: Ensure that NBD server is up
  # NBD server is sometimes down after running update (see: https://github.com/imincik/gis-lab/issues/327)
  service: name=nbd-server state=started


- meta: flush_handlers

# vim:ft=ansible:
