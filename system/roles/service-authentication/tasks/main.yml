---
#
###  KERBEROS AND LDAP DATABASE ###
#
# Install and configure authentication and authorization servers.
#
# Logging: /storage/log/syslog


# Kerberos

- name: Install Kerberos packages
  apt: pkg={{ item }} force=yes install_recommends=no state=latest
  with_items:
    - krb5-admin-server
    - libpam-krb5

- name: Install configuration files for Kerberos
  template: src={{ item.src }} dest={{ item.dest }} owner=root group=root mode={{ item.mode }}
  with_items:
    - { src: "kerberos/krb5.conf.j2", dest: "/etc/krb5.conf", mode: "0644" }
    - { src: "kerberos/kdc.conf.j2", dest: "/etc/krb5kdc/kdc.conf", mode: "0644" }
    - { src: "kerberos/kadm5.acl.j2", dest: "/etc/krb5kdc/kadm5.acl", mode: "0600" }

- name: Detect if Kerberos is installed
  shell: "kdb5_util -r GIS.LAB dump 2>/dev/null || echo 'KERBEROS DB EMPTY'"
  args:
    executable: /bin/bash
  register: kerberos_db_status
  changed_when: False

- name: Generate Kerberos master password
  shell: pwgen -s -N 1 10 > /etc/gislab/gislab_kerberos_master_password.txt
    && chmod 0600 /etc/gislab/gislab_kerberos_master_password.txt
  args:
    creates: /etc/gislab/gislab_kerberos_master_password.txt

- name: Get Kerberos master password
  shell: cat /etc/gislab/gislab_kerberos_master_password.txt
  register: gislab_kerberos_master_password
  changed_when: False

- name: Create Kerberos realm GIS.LAB (run only once)
  shell: kdb5_util -P {{ gislab_kerberos_master_password.stdout }} create -s
  args:
    executable: /bin/bash
  when: kerberos_db_status.stdout == "KERBEROS DB EMPTY"

- name: Restart Kerberos services
  service: name={{ item }} state=restarted
  with_items:
    - krb5-kdc
    - krb5-admin-server
  when: kerberos_db_status.stdout == "KERBEROS DB EMPTY"

- name: Create policies for users, admins and hosts
  command: kadmin.local -q "addpol {{ item }}"
  with_items:
    - users
    - admins
    - hosts

- name: Create Kerberos principals for server.gis.lab and export them to the keytab file
  shell: kadmin.local -q "addprinc -randkey -policy hosts {{ item }}"
    && kadmin.local -q "ktadd {{ item }}"
  with_items:
    - host/server.gis.lab
    - nfs/server.gis.lab
  when: kerberos_db_status.stdout == "KERBEROS DB EMPTY"


# SASL
- name: Install SASL package
  apt: pkg={{ item }} force=yes install_recommends=no state=latest
  with_items:
      - sasl2-bin
      - libsasl2-modules-gssapi-mit

- name: Install SASL configuration file
  template: src=sasl/saslauthd.j2 dest=/etc/default/saslauthd


- name: Restart SASL service
  service: name=saslauthd state=restarted


# LDAP
- name: Install LDAP packages
  apt: pkg={{ item }} force=yes install_recommends=no state=latest
  # libpam-cracklib is improving strength of user passwords. It is also responsible for setting of PAM 'authtok'.
  # If libpam-cracklib is not installed, change 'use_authtok' option in /etc/pam.d/common-password to 'try_authtok'
  # or remove it, otherwise it will be impossible to change user password using 'passwd' command.
  with_items:
    - gnutls-bin
    - ldapscripts
    - libpam-cracklib
    - ldap-utils
    - libnss-ldap
    - pwgen
    - python-ldap
    - slapd
    - ssl-cert

- name: Add 'openldap' user to 'sasl' group
  shell: adduser openldap sasl 2> /dev/null || true

- name: Add 'openldap' user to 'ssl-cert' group
  shell: adduser openldap ssl-cert 2> /dev/null || true


- name: Detect if LDAP is installed
  shell: "ldapsearch -Q -LLL -Y EXTERNAL -H ldapi:/// '(o=gis.lab)' 2>/dev/null || echo 'LDAP DB EMPTY'"
  args:
    executable: /bin/bash
  register: ldap_db_status
  changed_when: False


# Enable SASL in LDAP
- name: Configure LDAP to use SASL
  template: src=ldap/sasl-slapd.conf.j2 dest=/usr/lib/sasl2/slapd.conf
  notify:
    - service slapd restart

# Move LDAP database to /storage
- name: Allow access for slapd to /storage directory
  template: src=apparmor/usr.sbin.slapd.j2 dest=/etc/apparmor.d/local/usr.sbin.slapd

- name: Reload apparmor service
  service: name=apparmor state=reloaded


- name: Stop LDAP database
  service: name=slapd state=stopped

- name: Move LDAP database to /storage directory (run only once)
  shell: mv -f /var/lib/ldap /storage/applications/
    && ln -s /storage/applications/ldap /var/lib/ldap
  args:
    creates: /storage/applications/ldap/DB_CONFIG

- name: Start LDAP service
  service: name=slapd state=started


- name: Load LDAP database storage directory configuration (run only once)
  template: src=ldap/change_ldap_directory.ldif.j2 dest=/tmp/ldap.ldif
  when: ldap_db_status.stdout == "LDAP DB EMPTY"

- name: Install LDAP database storage directory configuration (run only once)
  shell: ldapadd -Q -Y EXTERNAL -H ldapi:/// -f /tmp/ldap.ldif
  when: ldap_db_status.stdout == "LDAP DB EMPTY"


- name: Remove old LDAP database storage directory
  file: dest=/var/lib/ldap state=absent


# PAM
- name: Install Kerberos PAM configuration file
  template: src=kerberos/pam_krb5.j2 dest=/usr/share/pam-configs/krb5

- name: Configure PAM to use Kerberos and Unix authentication
  shell: DEBIAN_FRONTEND=noninteractive pam-auth-update --force --package krb5 unix --remove ldap

- name: Configure PAM to use LDAP
  template: src=ldap/ldap-pam.conf.j2 dest=/etc/ldap.conf


- name: LDAP clients configuration
# configure base DN and URI and disable certificates verification
  template: src=ldap/ldap.conf.j2 dest=/etc/ldap/ldap.conf
  notify:
    - service slapd restart

- name: Configure nsswitch
  template: src=ldap/nsswitch.conf.j2 dest=/etc/nsswitch.conf
  notify:
    - service slapd restart


# LDAP admin credentials
- name: Generate LDAP admin password (run only once)
  shell: pwgen -s -N 1 10 > /etc/gislab/gislab_ldap_admin_password.txt && chmod 600 /etc/gislab/gislab_ldap_admin_password.txt
  args:
    creates: /etc/gislab/gislab_ldap_admin_password.txt

- name: Get LDAP admin password
  shell: cat /etc/gislab/gislab_ldap_admin_password.txt
  register: gislab_ldap_admin_password
  changed_when: False

- name: Generate hash of LDAP admin password
  shell: slappasswd -s {{ gislab_ldap_admin_password.stdout }} -h {SSHA}
  register: gislab_ldap_admin_password_hash
  changed_when: False

- name: Save LDAP admin password to LDAP db
  shell: "printf 'dn: olcDatabase={1}hdb,cn=config\nreplace: olcRootPW\nolcRootPW: {{ gislab_ldap_admin_password_hash.stdout }}\n'| ldapmodify -Q -Y EXTERNAL -H ldapi:///"


# SSL
- name: Configure certificate authority
  template: src=ssl/ca.info.j2 dest=/etc/ssl/ca.info


- name: Generate self signed certificates and private key for encrypted LDAP communication (run only once)
  shell: "{{ item }}"
  with_items:
    - certtool --generate-privkey > /etc/gislab/gislab_ldap_private_cakey.pem
    - certtool --generate-self-signed
      --load-privkey /etc/gislab/gislab_ldap_private_cakey.pem
      --template /etc/ssl/ca.info
      --outfile /etc/gislab/gislab_ldap_cert_cacert.pem
    - certtool --generate-privkey
      --bits 1024
      --outfile /etc/gislab/gislab_ldap_private_server_slapd_key.pem
  args:
    creates: /etc/gislab/gislab_ldap_private_server_slapd_key.pem

- name: Install self signed certificates and private key for encrypted LDAP communication
  shell: "{{ item }}"
  with_items:
    - cp /etc/gislab/gislab_ldap_private_cakey.pem /etc/ssl/private/cakey.pem
    - cp /etc/gislab/gislab_ldap_cert_cacert.pem /etc/ssl/certs/cacert.pem
    - cp /etc/gislab/gislab_ldap_private_server_slapd_key.pem /etc/ssl/private/server_slapd_key.pem
    - chgrp ssl-cert /etc/ssl/private/server_slapd_key.pem
    - chmod g+r /etc/ssl/private/server_slapd_key.pem
    - chmod o-r /etc/ssl/private/server_slapd_key.pem
  notify:
    - service slapd restart

- name: Configure server
  template: src=ssl/server.info.j2 dest=/etc/ssl/server.info


- name: Generate certificate for encrypted LDAP communication (run only once)
  shell: certtool --generate-certificate
         --load-privkey /etc/ssl/private/server_slapd_key.pem
         --load-ca-certificate /etc/ssl/certs/cacert.pem
         --load-ca-privkey /etc/ssl/private/cakey.pem
         --template /etc/ssl/server.info
         --outfile /etc/gislab/gislab_ldap_cert_server_slapd_cert.pem
  args:
    creates: /etc/gislab/gislab_ldap_cert_server_slapd_cert.pem

- name: Install certificate for encrypted LDAP communication
  shell: cp /etc/gislab/gislab_ldap_cert_server_slapd_cert.pem /etc/ssl/certs/server_slapd_cert.pem
  notify:
    - service slapd restart


- name: Load TLS certificates configuration
  template: src=ldap/tls-certificates.ldif.j2 dest=/tmp/ldap.ldif

- name: Install TLS certificates configuration (run only once)
  shell: ldapmodify -Q -Y EXTERNAL -H ldapi:// -f /tmp/ldap.ldif
  when: ldap_db_status.stdout == "LDAP DB EMPTY"
  notify:
    - service slapd restart


# LDAP sudo
- name: Install LDAP sudo support
  shell: DEBIAN_FRONTEND=noninteractive SUDO_FORCE_REMOVE=yes apt-get -y install sudo-ldap
  notify:
    - service slapd restart

- name: Load sudo LDAP schema
  template: src=ldap/sudo-schema.ldif.j2 dest=/tmp/ldap.ldif

- name: Install sudo LDAP schema (run only once)
  shell: ldapadd -Q -Y EXTERNAL -H ldapi:/// -f /tmp/ldap.ldif
  when: ldap_db_status.stdout == "LDAP DB EMPTY"


# LDAP Postfix schema
- name: Load Postfix LDAP schema
  template: src=ldap/postfix-schema.ldif.j2 dest=/tmp/ldap.ldif

- name: Install Postfix LDAP schema (run only once)
  shell: ldapadd -Q -Y EXTERNAL -H ldapi:/// -f /tmp/ldap.ldif
  when: ldap_db_status.stdout == "LDAP DB EMPTY"


# LDAP indexes
- name: Load LDAP indexes
  template: src=ldap/indexes.ldif.j2 dest=/tmp/ldap.ldif

- name: Install LDAP indexes (run only once)
  shell: ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f /tmp/ldap.ldif
  when: ldap_db_status.stdout == "LDAP DB EMPTY"


# GIS.lab LDAP tree
- name: Load GIS.lab LDAP tree
  template: src=ldap/gislab-tree.ldif.j2 dest=/tmp/ldap.ldif

- name: Install GIS.lab LDAP tree (run only once)
  shell: 'ldapadd -Z -w {{ gislab_ldap_admin_password.stdout }} -D "cn=admin,dc=gis,dc=lab" -f /tmp/ldap.ldif'
  when: ldap_db_status.stdout == "LDAP DB EMPTY"

- meta: flush_handlers


# LDAPscripts
- name: Configure LDAP scripts
  template: src=ldapscripts/ldapscripts.conf.j2 dest=/etc/ldapscripts/ldapscripts.conf

- name: Install LDAP scripts user's and group's templates
  template: src={{ item.src }} dest={{ item.dest }}
  with_items:
    - { src: "ldapscripts/adduser.template.j2", dest: "/etc/ldapscripts/adduser.template" }
    - { src: "ldapscripts/addgroup.template.j2", dest: "/etc/ldapscripts/addgroup.template" }

- name: Load LDAP scripts runtime patch (https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=719295)
  copy: src=static/ldapscripts/runtime-fix.patch dest=/tmp/runtime-fix.patch

- name: Install LDAP scripts runtime patch (run only once)
  shell: patch /usr/share/ldapscripts/runtime /tmp/runtime-fix.patch; rm -f /tmp/runtime-fix.patch
  when: ldap_db_status.stdout == "LDAP DB EMPTY"

- name: Save LDAP admin password to LDAP scripts (run only once)
  shell: printf "{{ gislab_ldap_admin_password.stdout }}" > /etc/ldapscripts/ldapscripts.passwd && chmod 0600 /etc/ldapscripts/ldapscripts.passwd


# Logging
- name: Load LDAP logging configuration
  template: src=ldap/logging.ldif.j2 dest=/tmp/ldap.ldif

- name: Install LDAP logging configuration
  shell: ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f /tmp/ldap.ldif


# The end
- name: Remove temporary 'ldif' file
  file: path=/tmp/ldap.ldif state=absent

# vim:ft=ansible:
