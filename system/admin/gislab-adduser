#!/bin/bash

set -e

source /etc/gislab_version
source $GISLAB_ROOT/system/functions.sh


# require root privileges
gislab_require_root


### USAGE
function usage() {
    echo "USAGE: $(basename $0) [OPTIONS] username"
    echo "Create GIS.lab user account."
    echo "User name can contain only lower case digits and numbers."
    echo -e "\nOPTIONS
    -g first name (required)
    -l last name (required)
    -m email (required)
    -p password (optional, default: automatically generated)
    -d user description (optional)
    -s add user to superuser's group (optional)
    -a add user to supplementary group(s) separated by comma (optional)
    -h display this help
    "
    exit 255
}


### OPTIONS
while getopts "a:d:g:l:m:p:sh" OPTION
do
    case "$OPTION" in
        g) opt_given_name=$OPTARG ;;
        l) opt_surname=$OPTARG ;;
        m) opt_email=$OPTARG ;;
        p) opt_password=$OPTARG ;;
        d) opt_description="$OPTARG" ;;
        s) opt_superuser=yes ;;
        a) opt_groups=$OPTARG ;;
        h) usage ;;
        \?) exit 1 ;;
    esac
done
shift $(($OPTIND - 1))
if [ $# -eq 0 ]; then usage; fi

if [ -z "$opt_given_name" \
     -o -z "$opt_surname" \
     -o -z "$opt_email" ]; then
    usage
fi

GISLAB_USER=$1
GISLAB_USER_FULL_NAME="$opt_given_name $opt_surname"


### VARIABLES
lds="ldapsearch -Q -LLL -Y EXTERNAL -H ldapi:///"


### SANITY CHECKS
if [ "$($lds "(&(objectClass=posixAccount)(uid=$GISLAB_USER))")" != "" ]; then
    gislab_error "User '$GISLAB_USER' already exists"
fi

if ! [[ "$GISLAB_USER" =~ ^[a-z][a-z0-9_]*$ ]]; then
    gislab_error "Invalid characters in user name"
fi

if ! [[ "$opt_email" =~ ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$ ]]; then
    gislab_error "Invalid e-mail address format"
fi

for g in $(echo $opt_groups | sed 's/,/ /g'); do
    if [ "$($lds "(&(objectClass=posixGroup)(cn=$g))")" == "" ]; then
        gislab_error "Group '$g' does not exists"
    fi
done


### MAIN SCRIPT
# export variables
export GISLAB_USER
export GISLAB_USER_GIVEN_NAME=$opt_given_name
export GISLAB_USER_SURNAME=$opt_surname
export GISLAB_USER_EMAIL=$opt_email
export GISLAB_USER_DESCRIPTION=$opt_description
export GISLAB_USER_SUPERUSER=$opt_superuser
export GISLAB_USER_GROUPS=$opt_groups


# execute before-add hooks
if [ -d $GISLAB_PATH_CUSTOM/accounts/before-add ]; then
    gislab_info "Running 'before-add' account hooks"
    run-parts $GISLAB_PATH_CUSTOM/accounts/before-add || true
fi


# LDAP
gislab_info "Adding user account"

# create LDAP account (without creating home directory - CREATEHOMES="no")
ldapadduser $GISLAB_USER gislabusers

# add user to supplementary group(s)
if [ -n "$opt_groups" ]; then
    gislab-moduser -a $opt_groups $GISLAB_USER
fi

# add LDAP user attributes
ldapmodifyuser $GISLAB_USER > /dev/null << EOL
changetype: modify
replace: cn
cn: $GISLAB_USER_FULL_NAME
-
replace: sn
sn: $opt_surname
-
add: givenName
givenName: $opt_given_name
-
add: mail
mail: $opt_email
-
add: gecos
gecos: $GISLAB_USER_FULL_NAME
EOL

if [ -n "$opt_description" ]; then
    ldapmodifyuser $GISLAB_USER > /dev/null << EOL
changetype: modify
add: description
description: $opt_description
EOL
fi

# allow sudo for user if creating superuser account
if [ "$opt_superuser" == "yes" ]; then
    gislab-moduser -s $GISLAB_USER
fi

# set user password
gislab-moduser -p $opt_password $GISLAB_USER


# run adduser hook
$GISLAB_PATH_SYSTEM/accounts/hooks/adduser.sh $GISLAB_USER


# execute after-add hooks
if [ -d $GISLAB_PATH_CUSTOM/accounts/after-add ]; then
    gislab_info "Running 'after-add' account hooks"
    run-parts $GISLAB_PATH_CUSTOM/accounts/after-add || true
fi


### CONFIRMATION MESSAGE
gislab_info "Account '$GISLAB_USER' was successfully created"

# vim: set ts=8 sts=4 sw=4 et:
