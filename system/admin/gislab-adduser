#!/bin/bash

set -e

source /etc/gislab_version
source $GISLAB_ROOT/system/functions.sh


# require root privileges
gislab_require_root


# usage
function usage() {
	echo "USAGE: $(basename $0) [OPTIONS] username"
	echo "Create GIS.lab user account. User name can contain only lower case digits and numbers."
	echo -e "\nOPTIONS
	-g first name (required)
	-l last name (required)
	-m email (required)
	-p password (optional, default: automatically generated)
	-d user description (optional)
	-s add user to superuser's group (optional)
	-h display this help
	"
	exit 255
}


# options
GISLAB_USER_PASSWORD=$(pwgen -1 -n 8) # generate password, can be overridden by '-p' option 

while getopts "d:g:l:m:p:sh" OPTION
do
        case "$OPTION" in
			g) GISLAB_USER_GIVEN_NAME=$OPTARG ;;
			l) GISLAB_USER_SURNAME=$OPTARG ;;
			m) GISLAB_USER_EMAIL=$OPTARG ;;
			p) GISLAB_USER_PASSWORD=$OPTARG ;;
			d) GISLAB_USER_DESCRIPTION="$OPTARG" ;;
			s) SUDO=yes ;;
			h) usage ;;
			\?) exit 1 ;;
        esac
done
shift $(($OPTIND - 1))
if [ $# -eq 0 ]; then usage; fi

if [ -z "$GISLAB_USER_GIVEN_NAME" -o -z "$GISLAB_USER_SURNAME" -o -z "$GISLAB_USER_EMAIL" ]; then
	usage
fi

GISLAB_USER=$1
GISLAB_USER_FULL_NAME="$GISLAB_USER_GIVEN_NAME $GISLAB_USER_SURNAME"


# sanity checks
if id -u $GISLAB_USER > /dev/null 2>&1; then
	gislab_print_error "User '$GISLAB_USER' already exists"
	exit 1
fi

if ! [[ "$GISLAB_USER" =~ ^[a-z][a-z0-9_]*$ ]]; then
	gislab_print_error "Invalid characters in user name"
	exit 1
fi

if ! [[ "$GISLAB_USER_EMAIL" =~ ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$ ]]; then
	gislab_print_error "Invalid e-mail address format"
	exit 1
fi


# export variables
export GISLAB_USER GISLAB_USER_GIVEN_NAME GISLAB_USER_SURNAME GISLAB_USER_EMAIL GISLAB_USER_DESCRIPTION


# execute before-add hooks
if [ -d $GISLAB_ROOT/custom/accounts/before-add ]; then
	gislab_print_info "Running 'before-add' account hooks"
	run-parts $GISLAB_ROOT/custom/accounts/before-add || true
fi


### LDAP
gislab_print_info "Adding user account"

# create LDAP account (without creating home directory - CREATEHOMES="no")
ldapadduser $GISLAB_USER gislabusers

# add LDAP user attributes
ldapmodifyuser $GISLAB_USER > /dev/null << EOL
changetype: modify
replace: cn
cn: $GISLAB_USER_FULL_NAME
-
replace: sn
sn: $GISLAB_USER_SURNAME
-
add: givenName
givenName: $GISLAB_USER_GIVEN_NAME
-
add: mail
mail: $GISLAB_USER_EMAIL
-
add: gecos
gecos: $GISLAB_USER_FULL_NAME
EOL

if [ -n "$GISLAB_USER_DESCRIPTION" ]; then
	ldapmodifyuser $GISLAB_USER > /dev/null << EOL
changetype: modify
add: description
description: $GISLAB_USER_DESCRIPTION
EOL
fi

# allow sudo for user if creating superuser account
if [ "$SUDO" == "yes" ]; then
	ldapaddusertogroup $GISLAB_USER gislabadmins
fi

# forward system mails to user if creating superuser account
# perform only if this email does not already exist in 'maildrop' (other user account
# can be possibly created with same email address)
ldapsearch_cmd="ldapsearch -Q -LLL -Y EXTERNAL -H ldapi:///"
maildrop_exists=$($ldapsearch_cmd -b "cn=root,ou=MailAliases,dc=gis,dc=lab" "(maildrop=$GISLAB_USER_EMAIL)" 2>/dev/null)

if [ "$SUDO" == "yes" -a -f /etc/postfix/sasl_passwd -a -z "$maildrop_exists" ]; then
	ldapadd -Z -y /etc/ldapscripts/ldapscripts.passwd -D "cn=admin,dc=gis,dc=lab" > /dev/null << EOL
dn: cn=root,ou=MailAliases,dc=gis,dc=lab
changetype: modify
add: maildrop
maildrop: $GISLAB_USER_EMAIL
EOL
fi

# set user password
gislab-password -p $GISLAB_USER_PASSWORD $GISLAB_USER


# run adduser hook
$GISLAB_ROOT/system/accounts/hooks/adduser.sh $GISLAB_USER


# execute after-add hooks
if [ -d $GISLAB_ROOT/custom/accounts/after-add ]; then
	gislab_print_info "Running 'after-add' account hooks"
	run-parts $GISLAB_ROOT/custom/accounts/after-add || true
fi


# final message
gislab_print_info "Account '$GISLAB_USER' was successfully added with password '$GISLAB_USER_PASSWORD'"


# vim: set ts=4 sts=4 sw=4 noet:
