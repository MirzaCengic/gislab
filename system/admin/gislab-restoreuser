#!/bin/bash

set -e

source /etc/gislab_version
source $GISLAB_ROOT/system/functions.sh


# require root privileges
gislab_require_root


# usage
function usage() {
	echo "USAGE: $(basename $0) [OPTIONS] username"
	echo "Restore GIS.lab user account from backup archive."
	echo -e "\nOPTIONS
	-f  backup archive file to restore account from
	-h  display this help"
	exit 255
}


# options
while getopts "b:f:h" OPTION
do
        case "$OPTION" in
			f) BACKUP_FILE="$OPTARG" ;;
			h) usage ;;
			\?) exit 1 ;;
        esac
done
shift $(($OPTIND - 1))
if [ $# -eq 0 ]; then usage; fi

if [ -z "$BACKUP_FILE" ]; then
	usage
fi

GISLAB_USER=$1


# sanity checks
if [ ! -f "$BACKUP_FILE" ]; then
	gislab_print_error "Backup file does not exist"
	exit 1
fi

if id $GISLAB_USER >/dev/null 2>&1; then
	gislab_print_error "User account '$GISLAB_USER' already exist. Remove it first"
	exit 1
fi

BACKUP_VERSION=$(tar --to-stdout -xf $BACKUP_FILE GISLAB_VERSION)
if [ "$BACKUP_VERSION" != "$GISLAB_VERSION" ]; then
	gislab_print_warning "Backup source version doesn't match target version ('$BACKUP_VERSION' != '$GISLAB_VERSION')"
fi


# populate variables and prepare directories structure
DATE=$(date '+%Y-%m-%d:%H-%M-%S')

BACKUP_DIR=/storage/backup
TEMP_BACKUP_DIR=$BACKUP_DIR/${GISLAB_USER}-${DATE}.restore
mkdir -p $TEMP_BACKUP_DIR


# untar backup file
tar -C $TEMP_BACKUP_DIR -xf $BACKUP_FILE
cd $TEMP_BACKUP_DIR

for file in *.bz2; do
	tar -xjf $file
done


# get user LDAP attributes from backup
while read line; do
	ATTR=$(echo $line | awk -F: '{ print $1 }')
	VAL=$(echo $line | sed 's/^[[:alnum:]]\+::\? //')

		case "$ATTR" in
			uid) GISLAB_USER_ORIG="$VAL" ;;
			givenName) GISLAB_USER_GIVEN_NAME="$VAL" ;;
			sn) GISLAB_USER_SURNAME="$VAL" ;;
			mail) GISLAB_USER_EMAIL="$VAL" ;;
			description) GISLAB_USER_DESCRIPTION="$VAL" ;;
			userPassword) GISLAB_USER_PASS_CRYPT="$VAL" ;;
			\#superuser) SUDO_OPT="-s" ;;
		esac
done < ldap.dump


# create user account
gislab-adduser	-g "$GISLAB_USER_GIVEN_NAME" \
				-l "$GISLAB_USER_SURNAME" \
				-m "$GISLAB_USER_EMAIL" \
				-d "$GISLAB_USER_DESCRIPTION" \
				$SUDO_OPT \
				$GISLAB_USER


# PASSWORD
ldapmodifyuser $GISLAB_USER > /dev/null << EOL
changetype: modify
replace: userPassword
userPassword:: $GISLAB_USER_PASS_CRYPT
EOL
gislab_print_info "Original password restored from backup"


# HOME DATA
rsync -a storage/home/$GISLAB_USER_ORIG/ /storage/home/$GISLAB_USER/

if [ -f storage/home/$GISLAB_USER_ORIG/.config/user-dirs.dirs ]; then
	source storage/home/$GISLAB_USER_ORIG/.config/user-dirs.dirs
	mkdir -p /storage/home/$GISLAB_USER/$(basename $XDG_DOWNLOAD_DIR)
fi

chown -R $GISLAB_USER:gislabusers /storage/home/$GISLAB_USER


# PUBLISHED DATA
rsync -a storage/publish/$GISLAB_USER_ORIG/ /storage/publish/$GISLAB_USER/
chown -R $GISLAB_USER:www-data /storage/publish/$GISLAB_USER


# DATABASE DATA
pg_restore -U postgres -d gislab -n $GISLAB_USER postgresql.dump

# restore data from GIS.lab Web client only if installed and data is present in backup
ball_exist_src_sql="SELECT 1 FROM information_schema.tables WHERE
						table_schema = '${GISLAB_USER}'
						AND table_name = 'gislab_ball'"
ball_exist_dest_sql="SELECT 1 FROM information_schema.tables WHERE table_name = 'storage_ball'"
if [ "$(psql -U postgres -d gislab -tAc "$ball_exist_src_sql")" == "1" ]; then
	if [ "$(psql -U postgres -d gislab -tAc "$ball_exist_dest_sql")" == "1" ]; then
		psql -U postgres -d gislab -c "INSERT INTO storage_ball SELECT * FROM ${GISLAB_USER}.gislab_ball;"
		psql -U postgres -d gislab -c "INSERT INTO storage_drawing SELECT * FROM ${GISLAB_USER}.gislab_drawing;"
	else
		gislab_print_warning "GIS.lab Web client is not installed. Skipping data restore"
	fi
fi

psql -U postgres -d gislab -c "DROP TABLE IF EXISTS ${GISLAB_USER}.gislab_ball" > /dev/null
psql -U postgres -d gislab -c "DROP TABLE IF EXISTS ${GISLAB_USER}.gislab_drawing" > /dev/null


# clean up
rm -rf $TEMP_BACKUP_DIR


gislab_print_info "Account '$GISLAB_USER' restored from '$BACKUP_FILE'"


# vim: set ts=4 sts=4 sw=4 noet:
