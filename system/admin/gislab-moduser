#!/bin/bash

set -e

source /etc/gislab_version
source $GISLAB_ROOT/system/functions.sh


# require root privileges
gislab_require_root


# usage
function usage() {
    echo "USAGE: $(basename $0) [OPTIONS] username"
    echo "Modify GIS.lab user account."
    echo -e "\nOPTIONS
    -a add user to supplementary group(s), separate groups with comma
    -A delete user from supplementary group(s), separate groups with comma
    -s add user to superuser's group
    -S delete user from superuser's group
    -m change user email
    -p change user password (if password is not given, it will be generated)
    -d change user description
    -h display this help
    "
    exit 255
}


# options
GISLAB_USER_GEN_PASSWORD=$(pwgen -1 -n 8) # generate password

while getopts "a:A:sSm:pd:h" OPTION
do
        case "$OPTION" in
            a) CMD=add_to_group; GISLAB_USER_GROUPS=$OPTARG; shift; break ;;
            A) CMD=delete_from_group; GISLAB_USER_GROUPS=$OPTARG; shift; break ;;
            s) CMD=enable_sudo; break ;;
            S) CMD=disable_sudo; break ;;
            m) CMD=change_mail; GISLAB_USER_EMAIL=$OPTARG; shift; break ;;
            p) CMD=set_password
               if [ $# -eq 3 ]; then
                GISLAB_USER_PASSWORD=$2
                shift
                   break
               else
                   GISLAB_USER_PASSWORD=$GISLAB_USER_GEN_PASSWORD
                   break
               fi ;;
            d) CMD=change_description; GISLAB_USER_DESCRIPTION="$OPTARG"; shift; break ;;
            h) usage ;;
        esac
done

shift || true
if [ $# -ne 1 ]; then usage; fi

GISLAB_USER=$1
ldapsearch_cmd="ldapsearch -Q -LLL -Y EXTERNAL -H ldapi:///"


# helping functions
get_user_email() {
    email=$($ldapsearch_cmd \
        "uid=$1" mail 2>/dev/null | awk '/^mail: / { print $2 }')
    echo "$email"
}

check_maildrop() {
    maildrop=$($ldapsearch_cmd \
        -b "cn=root,ou=MailAliases,dc=gis,dc=lab" "(maildrop=$1)" 2>/dev/null)
    echo "$maildrop"
}


# main functions
add_user_to_group() {
    G_USER=$1
    G_GROUPS="$(echo $2 | sed 's/,/ /g')"

    # sanity checks
    for G_GROUP in $G_GROUPS; do
        # check superuser's group
        if [ "$G_GROUP" == "gislabadmins" ]; then
            gislab_print_error "
                To add user to superuser's group use '-s' option
            "
        fi

        # check if group exists
        if ! getent group $G_GROUP >/dev/null 2>&1; then
            gislab_print_error "Group '$G_GROUP' does not exists"
        fi

        # check if user is already in a group
        if id $G_USER | grep -q "($G_GROUP)"; then
            gislab_print_error "
                User '$G_USER' is already member of a group '$G_GROUP'
            "
        fi
    done

    # add user to group(s)
    for G_GROUP in $G_GROUPS; do
        ldapaddusertogroup $G_USER $G_GROUP
    done
}

delete_user_from_group() {
    G_USER=$1
    G_GROUPS="$(echo $2 | tr ',' '\n')"

    # sanity checks
    for G_GROUP in $G_GROUPS; do
        # check superuser's group
        if [ "$G_GROUP" == "gislabadmins" ]; then
            gislab_print_error "
                To delete user from superuser's group use '-S' option
            "
        fi

        # check default group 'gislabusers'
        if [ "$G_GROUP" == "gislabusers" ]; then
            gislab_print_error "
                Cannot delete user from group 'gislabusers'.
                It is a mandatory group
            "
        fi

        # check if group exists
        if ! getent group $G_GROUP >/dev/null 2>&1; then
            gislab_print_error "Group '$G_GROUP' does not exists"
        fi

        # check if user is a member of a group
        if ! id $G_USER | grep -q "($G_GROUP)"; then
            gislab_print_error "
                User '$G_USER' is not a member of a group '$G_GROUP'
            "
        fi
    done

    # delete user from group(s)
    for G_GROUP in $G_GROUPS; do
        ldapdeleteuserfromgroup $G_USER $G_GROUP
    done
}

enable_sudo() {
    G_USER=$1

    # check if user is already in a group
    if id $G_USER | grep -q "(gislabadmins)"; then
        gislab_print_error "
            User '$G_USER' is already member of a superusers's group
        "
    fi

    # add user to superuser's group
    ldapaddusertogroup $G_USER gislabadmins


    # forward system mails to user if creating superuser account
    # perform only if this email does not already exist in 'maildrop'
    # (other user account can be possibly created with same email address)
    G_USER_EMAIL=$(get_user_email $G_USER)
    maildrop_exists=$(check_maildrop $G_USER_EMAIL)

    if [ -f /etc/postfix/sasl_passwd -a -z "$maildrop_exists" ]; then
        ldapadd -Z \
            -y /etc/ldapscripts/ldapscripts.passwd \
            -D "cn=admin,dc=gis,dc=lab" > /dev/null << EOL
dn: cn=root,ou=MailAliases,dc=gis,dc=lab
changetype: modify
add: maildrop
maildrop: $G_USER_EMAIL
EOL
    fi
}

disable_sudo() {
    G_USER=$1

    # check if user is member of superuser's group
    if ! id $G_USER | grep -q "(gislabadmins)"; then
        gislab_print_error "
            User '$G_USER' is not a member of a superusers's group
        "
    fi

    # delete user from superuser's group
    ldapdeleteuserfromgroup $G_USER gislabadmins


    # disable forwarding system mails to user
    G_USER_EMAIL=$(get_user_email $G_USER)
    maildrop_exists=$(check_maildrop $G_USER_EMAIL)

    if [ -n "$maildrop_exists" ]; then
        ldapadd -Z \
            -y /etc/ldapscripts/ldapscripts.passwd \
            -D "cn=admin,dc=gis,dc=lab" > /dev/null << EOL
dn: cn=root,ou=MailAliases,dc=gis,dc=lab
changetype: modify
delete: maildrop
maildrop: $G_USER_EMAIL
EOL
    fi
}

change_user_mail() {
    G_USER=$1
    G_USER_EMAIL=$2

    # sanity check
    if ! [[ "$G_USER_EMAIL" =~ ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$ ]]; then
        gislab_print_error "Invalid e-mail address format"
        exit 1
    fi

    # forward system mails to new email address (if user is superuser)
    if id $G_USER | grep -q "(gislabadmins)"; then
        G_USER_EMAIL_CUR=$(get_user_email $G_USER)
        maildrop_exists=$(check_maildrop $G_USER_EMAIL_CUR)

        if [ -n "$maildrop_exists" ]; then
            ldapadd -Z \
                -y /etc/ldapscripts/ldapscripts.passwd \
                -D "cn=admin,dc=gis,dc=lab" > /dev/null << EOL
dn: cn=root,ou=MailAliases,dc=gis,dc=lab
changetype: modify
delete: maildrop
maildrop: $G_USER_EMAIL_CUR
-
add: maildrop
maildrop: $G_USER_EMAIL
EOL
        fi
    fi

    # change email address
    ldapmodifyuser $G_USER > /dev/null << EOL
changetype: modify
replace: mail
mail: $G_USER_EMAIL
EOL
}

set_user_password() {
    G_USER=$1
    G_USER_PASSWORD=$2

    G_USER_PASSWORD_HASH=$(slappasswd -s $G_USER_PASSWORD -h {SSHA})

    # set user's password
    ldapsetpasswd $G_USER $G_USER_PASSWORD_HASH
}

change_user_description() {
    G_USER=$1
    G_USER_DESCRIPTION=$2

    # change user's description
    ldapmodifyuser $G_USER > /dev/null << EOL
changetype: modify
replace: description
description: $G_USER_DESCRIPTION
EOL
}


# check if user exists
if ! id -u $GISLAB_USER > /dev/null 2>&1; then
    gislab_print_error "User '$GISLAB_USER' does not exists"
    exit 1
fi


case "$CMD" in
    add_to_group)
        add_user_to_group $GISLAB_USER $GISLAB_USER_GROUPS
        gislab_print_info "
            User '$GISLAB_USER' was successfully added to
            group(s) '$GISLAB_USER_GROUPS'
        "
    ;;
    delete_from_group)
        delete_user_from_group $GISLAB_USER $GISLAB_USER_GROUPS
        gislab_print_info "
            User '$GISLAB_USER' was successfully deleted from
            group(s) '$GISLAB_USER_GROUPS'
        "
    ;;
    enable_sudo)
        enable_sudo $GISLAB_USER
        gislab_print_info "
            User '$GISLAB_USER' was successfully
            added to the superuser's group
        "
    ;;
    disable_sudo)
        disable_sudo $GISLAB_USER
        gislab_print_info "
            User '$GISLAB_USER' was successfully deleted from superuser's group
        "
    ;;
    change_mail)
        change_user_mail $GISLAB_USER $GISLAB_USER_EMAIL
        gislab_print_info "
            User '$GISLAB_USER' email was successfully
            updated to '$GISLAB_USER_EMAIL'
        "
    ;;
    set_password)
        set_user_password $GISLAB_USER $GISLAB_USER_PASSWORD
        gislab_print_info "
            Account '$GISLAB_USER' updated with password
            '$GISLAB_USER_PASSWORD'
        "
    ;;
    change_description)
        change_user_description $GISLAB_USER "$GISLAB_USER_DESCRIPTION"
        gislab_print_info "
            User '$GISLAB_USER' description was successfully updated
        "
    ;;
    *)
        gislab_print_error "Internal error"
    ;;
esac

# vim: set ts=8 sts=4 sw=4 et:
